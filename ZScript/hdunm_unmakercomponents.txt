class ArmaggedonTrail : Actor
{
	Default
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		Renderstyle "Subtract";
		Scale 1.1;
		Alpha 0.1;
	}

	States
	{
		Spawn:
			MDWH A 1
			{
				A_SetScale(Scale.x - 0.002);
				A_FadeOut(0.001);
				roll--;
			}
			Wait;
	}
}

class ArmageddonBall:HDFireball{
	default{
		-notelestomp +telestomp
		+skyexplode +forceradiusdmg +ripper -noteleport +notarget
		+bright
		Translation "ArmaggedonBall";
		renderstyle "add";
		+boss
		deathsound "weapons/bfgx"; seesound "";
		obituary "$OB_MPBFG_BOOM";
		damagetype "unmaker";
		alpha 0.9;
		scale 0.2;
		height 4;
		radius 4;
		speed 3;
		gravity 0;
	}

	const EffectRange = HDCONST_ONEMETRE * 50;
	int blackholetick;

	states{
	spawn:
		BFS1 A 0 nodelay A_StartSound("unmaker/armaggedonballloop",CHAN_WEAPON,CHANF_LOOP|CHANF_OVERLAP);
		BFS1 AB 2{if(target)hdmobai.frighten(target,1024);else hdmobai.frighten(self,1024);}
		BFS1 A 0{
			bripper=false;
		}
		goto spawn2;
	spawn2:
		BFS1 AB 1{if(target)hdmobai.frighten(target,1024);else hdmobai.frighten(self,1024);}
		BFS1 # 0{A_Corkscrew();A_FBSeek(128);}
		loop;
	death:
		#### # 0{A_StopSound(CHAN_WEAPON); if(tracer){tracer.damagemobj(self,target,999999999,"unmaker",DMG_PLAYERATTACK);if(!tracer.bboss&&!tracer.bbossdeath)tracer.destroy();}}
		BFE1 A 2 A_SetScale(1.6);
		BFE1 B 2 A_Explode(640,1024,0);
		BFE1 B 4{
			DistantQuaker.Quake(self,
				12,200,16384,20,512,1024,256
			);
			DistantNoise.Make(self,"world/bfgfar");
		}
		#### # 0{
			A_StartSound("unmaker/armaggedonstart", CHAN_WEAPON, CHANF_OVERLAP, pitch: 0.7);
			A_StartSound("unmaker/armaggedonloop", CHAN_WEAPON, CHANF_LOOP|CHANF_OVERLAP, pitch: 0.7);
			A_StartSound("unmaker/armaggedonhell", CHAN_WEAPON, CHANF_LOOP|CHANF_OVERLAP);
			actor bbl=spawn("ArmaggedonLight",pos,ALLOW_REPLACE);bbl.target=self;
			A_SetTranslation("ArmaggedonBlackHole");
		}
	armaggedon:
		AMGN A 1
		{
			A_SetScale(frandom(1.2, 1.6));
			roll -= 4;
			BlockThingsIterator it = BlockThingsIterator.Create(self, EffectRange);
			while (it.Next())
			{
				if ((it.thing is 'HDUnmaker') || ((it.thing is 'BaronUnmaker') && (it.thing.target == self)) || it.thing is 'ArmaggedonTrail' || !CheckSight(it.thing, SF_IGNOREVISIBILITY) || (hd_pof && it.thing is 'HDPlayerCorpse'))
				{
					continue;
				}

				if (!((it.thing is 'BaronUnmaker') && (it.thing.target == self)) && !(it.thing is 'HDUnmaker') && (!it.thing.bISMONSTER || it.thing.Health <= 0) && Distance3D(it.thing) < 48 && !(it.thing is 'HDPlayerPawn'))
				{
					it.thing.Destroy();
					continue;
				}

				if (!((it.thing is 'BaronUnmaker') && (it.thing.target == self)) && it.thing.Health > 0 && (Distance3D(it.thing) < 128))
				{
					it.thing.DamageMobj(self, target, it.thing.SpawnHealth()/10, 'unmaker', DMG_FORCED);
				}

				if (it.thing)
				{
					it.thing.bSLIDESONWALLS = true;
					it.thing.A_Face(self, 0, 0);
					it.thing.A_ChangeVelocity(1 * cos(it.thing.pitch), 0, 2 * -sin(it.thing.pitch), CVF_RELATIVE);
					it.thing.vel.x = clamp(it.thing.vel.x, -8, 8);
					it.thing.vel.y = clamp(it.thing.vel.y, -8, 8);
					it.thing.vel.z = clamp(it.thing.vel.z, -8, 8);
				}
			}

			double OldAngle = angle;
			double OldPitch = pitch;

			if (!random(0, 1))
			{
				angle = frandom(0, 359);
				pitch = frandom(-90, 90);
				A_CustomRailgun(0, 0, "", "ff 55 88", RGF_SILENT | RGF_FULLBRIGHT | RGF_EXPLICITANGLE, 0, 10, "BlankPuffUnmaker", range: EffectRange, duration: 15);
			}

				angle = OldAngle;
				pitch = OldPitch;

			if (GetAge() % 3 == 0)
			{
				A_SpawnItemEx("ArmaggedonTrail", flags: SXF_NOCHECKPOSITION | SXF_TRANSFERROLL);
			}
			blackholetick++;
		}
		#### # 0 A_JumpIf(blackholetick>TICRATE*30,"disintegrate");
		loop;
	disintegrate:
		#### # 0{A_SetTranslation("ArmaggedonBall");roll = 0; A_StopSound(CHAN_WEAPON); A_StartSound("weapons/bfgx",CHAN_WEAPON, pitch: 0.5);}
		BFE1 C 4{
			DistantQuaker.Quake(self,
				12,200,16384,20,512,1024,256
			);
			A_Explode(1280,2048,0);
			A_SetScale(3.2);
			DistantNoise.Make(self,"world/bfgfar");

			// Horizontal ring.
			for (int i = -180; i < 180; i += 2)
			{
				A_SpawnParticle(Color(0x401c4f), SPF_FULLBRIGHT | SPF_RELATIVE, 12, 96, i, 0, 0, 0, 24, 0, 0);
			}

			// Ball.
			for (int i = -180; i < 180; i += 6)
			{
				for (int j = -90 + 6; j < 90; j += 6)
				{
					A_SpawnParticle(Color(0x15031c), SPF_FULLBRIGHT | SPF_RELATIVE, 8, 64, i, 0, 0, 0, 14 * cos(j) * 1.2, 0, 14 * sin(j));
				}
			}
		}
		TNT1 AAAAA 0 A_SpawnItemEx("HDSmokeChunk",random(-2,0),random(-3,3),random(-2,2),random(-5,0),random(-5,5),random(0,5),random(100,260),SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION,16);
		TNT1 AAAAA 0 A_SpawnItemEx("ArmaggedonBallRemains",-1,0,-12,0,0,0,SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION,16);
		BFE1 CCCC 2;
		BFE1 CCC 0 A_SpawnItemEx("HDSmoke",random(-4,0),random(-3,3),random(0,4),random(-1,1),random(-1,1),random(1,3),0,SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION,16);
		BFE1 DEF 6;
		BFE1 F 3 bright A_FadeOut(0.1);
		wait;
	}
}

class ArmaggedonLight:PointLight{
	override void postbeginplay(){
		super.postbeginplay();
		args[0]=196;
		args[1]=32;
		args[2]=24;
		args[3]=0;
		args[4]=0;
	}
	override void tick(){
		if(!target){
			args[3]+=random(-40,1);
			if(args[3]<1)destroy();
		}else{
			setorigin(target.pos,true);
			args[3]=HDCONST_ONEMETRE*random(10,15);
		}
	}
}

class ArmaggedonBallRemains:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			stamina=0;
		}
	spawn2:
		TNT1 AAAA 1 A_SpawnParticle(
			"ff 55 88",SPF_FULLBRIGHT,35,
			size:frandom(1,8),0,
			frandom(-16,16),frandom(-16,16),frandom(0,8),
			frandom(-1,1),frandom(-1,1),frandom(1,2),
			frandom(-0.1,0.1),frandom(-0.1,0.1),-0.05
		);
		TNT1 A 0 A_SpawnItemEx("HDSmoke",random(-3,3),random(-3,3),random(-3,3),random(-1,1),random(-1,1),random(1,3),0,SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
		TNT1 A 0{stamina++;}
		TNT1 A 0 A_JumpIf(stamina<10,"spawn2");
		TNT1 AAAAAA 2 A_SpawnParticle(
			"ff 55 88",SPF_FULLBRIGHT,35,
			size:frandom(1,8),0,
			frandom(-16,16),frandom(-16,16),frandom(0,8),
			frandom(-1,1),frandom(-1,1),frandom(1,2),
			frandom(-0.1,0.1),frandom(-0.1,0.1),-0.05
		);
		stop;
	}
}

class UnmakerSpark:HDActor{
	default{
		+nointeraction +forcexybillboard +bright
		radius 0;height 0;
		Translation "112:127=176:191", "224:231=170:175", "168:168=170:170";
		renderstyle "add";alpha 0.1; scale 0.16;
	}
	states{
	spawn:
		BFE2 DDDDDDDDDD 1 bright nodelay A_FadeIn(0.1);
		BFE2 D 1 A_FadeOut(0.3);
		wait;
	}
}

class EgonUnmaker:RedParticleFountain{
	default{
		-invisible /*+nointeraction*/ +forcexybillboard +bloodlessimpact
		+noblood +alwayspuff -allowparticles +puffonactors +puffgetsowner +forceradiusdmg
		+hittracer
		renderstyle "add";
		decal "scorch";
		damagetype "Unmaker";
		Translation "112:127=176:191", "224:231=170:175", "168:168=170:170";
		scale 0.8;
		obituary "%o got continuously unmade from existence.";
	}
	bool lastshot;
	override void postbeginplay(){
		super.postbeginplay();
		let hdp=hdplayerpawn(target);
		if(!hdp)return;
		double tgtdist=distance3d(target)-64;

		//arc lightning back to owner
		vector2 oldface=(angle,pitch);
		A_FaceTarget(0,0,FAF_TOP);
		if(accuracy == 1) target.A_CustomRailgun(
			random(120,240),0,"","ff 55 88", //this line here is the one that matters - 1337spy
			RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
			0,10,"BlankPuffUnmaker",0,0,
			tgtdist,18,0.4,2.0,"",-4
		);
		else target.A_CustomRailgun(
			random(120,240),0,"","ff 55 88", //this line here is the one that matters - 1337spy
			RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
			0,10,"BlankPuffUnmaker",0,0,
			tgtdist,1,0.4,2.0,"",-4
		);
	}
	states{
	spawn:
		BFE2 A 1 bright nodelay{
			if(target)target=target.target;
			A_StartSound("misc/bfgrail",9005);
		}
		BFE2 A 3 bright{
			A_Explode(random(60,480),36,0,damagetype:"Unmaker");
			if(tracer&&target)tracer.damagemobj(tracer,target,random(100,300),"unmaker",DMG_PLAYERATTACK);
			else if(tracer)tracer.damagemobj(tracer,null,random(100,300),"unmaker");
			doordestroyer.destroydoor(self,maxwidth:160,range:96);
		}
		---- A 0 A_Quake(2,32,0,128);
		BFE2 ABCDE 2 bright A_FadeOut(0.1);
		stop;
	}
}

class BeamSpotRed:HDActor{
	default{
		+nointeraction //+noblockmap
		+forcexybillboard
		height 0.1;radius 0.1;
		translation "207:192=176:191";
		renderstyle "add";
	}
	override void postbeginplay(){
		super.postbeginplay();
		changetid(TB_BEAMSPOTTID);
	}

	static void RedArcZap(
		actor caller,
		double rad=0,
		int maxdamage=8,
		bool indiscriminate=false
	){
		array<actor> zappables;zappables.clear();
		if(!rad)rad=frandom(32,128);
		blockthingsiterator it=blockthingsiterator.create(caller,rad);
		while(it.next()){
			actor itt=it.thing;
			if(
				itt.bshootable
				&&(
					indiscriminate
					||caller.ishostile(itt)
				)
				&&caller.distance3dsquared(itt)<=(rad*rad)
				&&caller.checksight(itt)
			)zappables.push(itt);
		}
		actor itt=caller;
		if(zappables.size())itt=zappables[random(0,zappables.size()-1)];
		RedZapArc(caller,itt,ARC2_RANDOMSOURCE,rad,rad*0.3,dev:0.8);
		if(itt)itt.damagemobj(caller,caller,random(1,maxdamage),"unmaker");
	}

	void A_Flicker(){
		alpha=frandom(0.1,1.);
		double amt=frandom(0.6,1.3);
		scale=(randompick(1,-1),1.)*amt;
		if(!random(0,7))HDMobAI.Frighten(self,256);
	}
	void A_BeamSpotBoom(){
		if(!target){ //how would this even happen?
			spawn("HDExplosion",pos,ALLOW_REPLACE);
			A_Explode();
			return;
		}
		double tgtdist=distance3d(target)-64;

		//arc lightning back to owner
		vector2 oldface=(angle,pitch);
		A_FaceTarget(0,0,FAF_TOP);
		target.A_CustomRailgun(
			random(120,240),0,"","ff 55 88",
			RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
			0,40.0,"HDArcPuff",0,0,
			tgtdist,12,0.4,2.0,"",-4
		);
		angle=oldface.x;pitch=oldface.y;
		//spawn little cracks along the way
		vector3 toshooter=vec3to(target).unit();
		for(int i=0;i<tgtdist;i+=64){
			let aaa=spawn("ThunderCracker",pos+toshooter*i,ALLOW_REPLACE);
			if(aaa)aaa.target=target;
		}

		//crackity crack
		target.A_StartSound("weapons/plascrack",11);
		target.A_StartSound("weapons/plascrack",12);
		target.A_StartSound("weapons/plascrack",13);
		target.A_StartSound("world/tbfar",14);
		target.A_StartSound("world/explode",15,volume:0.5);

		//flash player's muzzle
		let hdp=hdplayerpawn(target);
		if(
			hdp
			&&hdp.player
		){
			let tbt=hdunmaker(target.player.readyweapon);
			if(tbt){
				hdp.recoilfov*=0.7;
				hdp.A_MuzzleClimb(
					(frandom(1.2,1.8),-frandom(4.0,5.4)),
					(frandom(0.8,1.2),-frandom(3.4,4.2)),
					(frandom(0.4,0.8),-frandom(2.4,2.4)),
					(-frandom(0.4,1.0),frandom(2.8,2.8))
				);
				hdp.player.setpsprite(PSP_FLASH,tbt.findstate("flash"));
				hdp.A_ChangeVelocity(
					cos(pitch)*-frandom(1,3),0,
					sin(pitch)*frandom(1,3),
					CVF_RELATIVE
				);
			}
		}

		//blast heat and shit		
		A_HDBlast(
			420,random(96,256),128,"slashing",
			pushradius:420,pushamount:256,
			immolateradius:128,immolateamount:-200,immolatechance:90
		);
		actor ltt=spawn("LingeringThunderRed",pos,ALLOW_REPLACE);
		ltt.target=target;

		A_SprayDecal("BusterScorch",14);
		DistantNoise.Make(self,"world/tbfar");
		DistantNoise.Make(self,"world/tbfar2",2.);
		DistantQuaker.Quake(self,
			5,50,2048,8,128,256,256
		);

		//check floor and ceiling and spawn more debris
		DistantNoise.Make(self,"world/tbfar");
		for(int i=0;i<3;i++)A_SpawnItemEx("WallChunker",
			frandom(-4,4),frandom(-4,4),-4,
			flags:SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS
		);

		//"open" a door or window
		doordestroyer.destroydoor(self,frandom(1,frandom(32,96)),frandom(1,frandom(16,64)));
	}
	void A_CheckNeighbourSpots(){
		array<actor>beamspots;beamspots.clear();
		actoriterator it=level.createactoriterator(TB_BEAMSPOTTID,"BeamSpotRed");
		while(master=it.Next()){
			if(!BeamSpotRed(master))continue;
			double dist=master.distance3d(self)*0.01;
			if(dist<8){
				stamina+=int(21-dist);
				if(master!=self)beamspots.push(master);
				if(master.stamina>21)master.setstatelabel("glow");
				else master.setstatelabel("spawn2");
			}
		}
		if(stamina>=144){
			for(int i=0;i<beamspots.size();i++){
				if(beamspots[i])beamspots[i].destroy();
			}
			setstatelabel("explode");
		}
		else if(stamina>=21)setstatelabel("glow");
	}

	static void RedParticleZigZag(
		actor caller,
		vector3 orig,
		vector3 dest,
		int segments=12,
		bool relpos=false,  //if true, treats o/d inputs as relative to caller
		vector3 pvel=(0,0,0),
		double dev=HDCONST_ZAPARCDEFAULTDEV  //amount of deviation in each node
	){
		if(orig==dest)return;

		if(!relpos){
			dest-=caller.pos;
			orig-=caller.pos;
		}

		array<double> arcx;
		array<double> arcy;
		array<double> arcz;
		arcx.clear();
		arcy.clear();
		arcz.clear();

		vector3 frac=(dest-orig)/segments;
		dev*=max(abs(frac.x),abs(frac.y),abs(frac.z));
		int lastpoint=segments-1;
		for(int i=0;i<segments;i++){
			if(i==lastpoint){
				arcx.push(dest.x);
				arcy.push(dest.y);
				arcz.push(dest.z);
			}else{
				arcx.push(frandom(-dev,dev)+orig.x+frac.x*i);
				arcy.push(frandom(-dev,dev)+orig.y+frac.y*i);
				arcz.push(frandom(-dev,dev)+orig.z+frac.z*i);
			}
		}

		int arx=arcx.size()-1;
		for(int i=0;i<arx;i++){
			int ii=i+1;
			vector3 firstpoint=(arcx[i],arcy[i],arcz[i]);
			vector3 lastpoint=(arcx[ii],arcy[ii],arcz[ii]);
			vector3 pointfrac=lastpoint-firstpoint;
			int pointdist=int(pointfrac.length())>>1;
			pointfrac=pointfrac.unit()*2.;
			for(int j=0;j<pointdist;j++){
				caller.A_SpawnParticle(

					"ff 55 88",SPF_FULLBRIGHT,20,frandom(2,4),0, //this line here is the one that matters - 1337spy
					firstpoint.x,
					firstpoint.y,
					firstpoint.z,
					pvel.x+frandom(-0.1,0.1),pvel.y+frandom(-0.1,0.1),pvel.z+frandom(-0.1,0.1)
				);
				firstpoint+=pointfrac;
			}
		}
	}

	static void RedZapArc(
		actor a1,
		actor a2=null,
		int flags=0,
		double radius=0,
		double height=0,
		vector3 pvel=(0,0,0),
		double dev=HDCONST_ZAPARCDEFAULTDEV
	){
		vector3 a1pos,a2pos;
		if(
			!a2
			||a1==a2
		){
			if(!a2)a2=a1;
			if(radius<=0)radius=a1.radius*1.2;
			if(height<=0)height=a1.height*1.1;
			double flr=a1.pos.z>a1.floorz?a1.height*-0.1:0;
			a1pos=(radius*(frandom(-1,1),frandom(-1,1)),frandom(flr,height));
			a2pos=(radius*(frandom(-1,1),frandom(-1,1)),frandom(flr,height));
		}else{
			a1pos=(a1.pos.xy,a1.pos.z+a1.height*0.6);
			a2pos=(a2.pos.xy,a2.pos.z+a2.height*0.6);
			if(flags&ARC2_RANDOMSOURCE){
				double radius=a1.radius*0.6;
				a1pos.xy+=(frandom(-radius,radius),frandom(-radius,radius));
				a1pos.z+=a1.height*frandom(-0.3,0.2);
			}
			if(flags&ARC2_RANDOMDEST){
				double radius=a2.radius*0.6;
				a2pos.xy+=(frandom(-radius,radius),frandom(-radius,radius));
				a2pos.z+=a2.height*frandom(-0.3,0.2);
			}
		}
		RedParticleZigZag(a1,a1pos,a2pos,relpos:(a1==a2),pvel:pvel,dev:dev);
		if(!(flags&ARC2_SILENT)){
			a1.A_StartSound("misc/zap",CHAN_ARCZAP,CHANF_OVERLAP);
			a2.A_StartSound("misc/zap2",CHAN_ARCZAP,CHANF_OVERLAP);
			a2.A_StartSound("misc/zap3",CHAN_ARCZAP,CHANF_OVERLAP);
		}
	}

	states{
	spawn:
		TNT1 A 0 nodelay A_CheckNeighbourSpots();
	spawn2:
		TNT1 A 3 A_StartSound("weapons/plasidle",CHAN_WEAPON,volume:0.4);
		stop;
	glow:
		PLSE A 0 A_SpawnItemEx("BeamSpotLightRed",flags:SXF_NOCHECKPOSITION|SXF_SETTARGET);
		PLSE A 0 A_SprayDecal("PlasmaShock",14);
		PLSE A 1 A_StartSound("weapons/plasidle",CHAN_WEAPON,volume:0.8);
		PLSE AAAA 1 A_Flicker();
		stop;
	explode:
		TNT1 A 0 A_BeamSpotBoom();
		TNT1 AAAA 0 Spawn("HDExplosion",pos+(frandom(-4,4),frandom(-4,4),frandom(-4,4)),ALLOW_REPLACE);
		TNT1 AAAA 0 Spawn("HDSmoke",pos+(frandom(-4,4),frandom(-4,4),frandom(-4,4)),ALLOW_REPLACE);
		TNT1 AAAAAAAA 0 RedArcZap(self);
		TNT1 AAAAAAAAAAAAAAA 2 RedArcZap(self);
		stop;
	}
}
class BeamSpotLightRed:PointLight{
	override void postbeginplay(){
		super.postbeginplay();
		args[0]=255;
		args[1]=85;
		args[2]=136;
		args[3]=0;
		args[4]=0;
	}
	override void tick(){
		if(!target){
			args[3]+=randompick(-10,10,-5,-20);
			if(args[3]<1)destroy();
		}else{
			args[3]=randompick(14,24,44);
			setorigin(target.pos,true);
		}
	}
}

//alt fire puff
class BeamSpotFlashRed:IdleDummy{
	default{
		+puffonactors +hittracer +puffgetsowner +rollsprite +rollcenter +forcexybillboard
		renderstyle "add";
		obituary "$OB_UNMAKER";
		translation "207:192=176:191";
		decal "Scorch";
		seesound "weapons/plasmaf";
		deathsound "weapons/plasmaf";
	}
	double impactdistance;
	override void postbeginplay(){
		if(impactdistance>2000){
			destroy();
			return;
		}
		super.postbeginplay();

		double impactcloseness=2000-impactdistance;
		scale*=(impactcloseness)*0.0006;
		alpha=scale.y+0.3;
		vel=(frandom(-1,1),frandom(-1,1),frandom(1,3));

		int n=int(max(impactcloseness*0.03,2));
		int n1=n*3/5;
		int n2=n*2/5;
		if(tracer){
			HDF.Give(tracer,"Heat",n);
			int dmgflags=target&&target.player?DMG_PLAYERATTACK:0;
			tracer.damagemobj(self,target,random(n1,n),"electrical",dmgflags);
		}
		A_HDBlast(
			n*2,random(1,n),n,"electrical",
			n,-n,
			immolateradius:n1,immolateamount:random(4,8)*n2/-10,immolatechance:n
		);

		pitch=frandom(80,90);
		angle=frandom(0,360);
		A_SpawnItemEx("BeamSpotFlashLightRed",flags:SXF_NOCHECKPOSITION|SXF_SETTARGET);
		A_SpawnChunks("HDGunSmoke",clamp(n2*3/5,4,7),3,6);
		A_StartSound("weapons/plasmaf");
		A_AlertMonsters();
	}
	states{
	spawn:
		PLSS AB 1 bright;
		PLSE AAA 1 bright A_FadeIn(0.1);
		PLSE BCDE 1 bright A_FadeOut(0.1);
		stop;
	}
}

class BeamSpotFlashLightRed:PointLight{
	override void postbeginplay(){
		super.postbeginplay();
		args[0]=255;
		args[1]=85;
		args[2]=136;
		args[3]=96;
		args[4]=0;
	}
	override void tick(){
		if(isfrozen())return;
		args[3]+=randompick(-10,5,-20);
		if(args[3]<1)destroy();
	}
}


//Ionized is the ground because of you
class LingeringThunderRed:IdleDummy{
	int startingstamina;
	default{
		stamina 256;
	}
	override void postbeginplay(){
		super.postbeginplay();
		startingstamina=stamina;
	}
	void A_Zap(){
		if(stamina<1){destroy();return;}
		stamina-=5;
		blockthingsiterator zit=blockthingsiterator.create(self,96+(stamina>>2));
		int icount=0;
		bool haszapped=false;
		while(zit.next()){
			actor zt=zit.thing;
			if(
				!zt
				||(!zt.bshootable&&!zt.bsolid)
				||abs(zt.pos.z-pos.z)>96
				||zt.floorz+(stamina>>2)<zt.pos.z
				||!random(0,3)
				||!checksight(zt)
			)continue;
			haszapped=true;
			int zappower=Zap(zt,self,target,stamina);
			stamina-=max(2,zappower>>3);
		}
		if(!haszapped){
			double oldrad=radius;
			a_setsize(stamina,height);
			Zap(self,self,target,stamina,true);
			a_setsize(oldrad,height);
		}
		A_SetTics(max(1,min(random(4,24),int(sqrt(startingstamina-stamina)))));
	}
	static int Zap(actor victim,actor inflictor,actor source,int baseamount,bool nodmg=false){
		//create arc
		double ztr=victim.radius;
		vector3 nodes[4];
		int len=min(35,baseamount);
		nodes[0]=victim.pos+(frandom(-ztr,ztr),frandom(-ztr,ztr),frandom(0,victim.height));
		nodes[1]=nodes[0]+(frandom(-len,len),frandom(-len,len),frandom(-len,len));
		nodes[2]=nodes[1]+(frandom(-len,len),frandom(-len,len),frandom(-(len>>1),len));
		nodes[3]=nodes[2]+(frandom(-len,len),frandom(-len,len),frandom(-len*2/3,(len>>1)));
		for(int i=1;i<4;i++){
			vector3 pastnode=nodes[i-1];
			vector3 particlepos=nodes[i]-pastnode;
			int iterations=int(particlepos.length());
			vector3 particlemove=particlepos/iterations;
			particlepos=pastnode-victim.pos;
			for(int i=0;i<iterations;i++){
				victim.A_SpawnParticle("ff 55 88",
					SPF_RELATIVE|SPF_FULLBRIGHT,(len>>1),frandom(1,7),0,
					particlepos.x,particlepos.y,particlepos.z,
					frandom(-0.1,0.1),frandom(-0.1,0.1),frandom(0.1,0.2),
					frandom(-0.1,0.1),frandom(-0.1,0.1),-0.05
				);
				particlepos+=particlemove+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
			}
		}

		int zappower=random(baseamount>>5,baseamount>>2);
		victim.A_StartSound("weapons/plasidle",CHAN_AUTO,volume:frandom(0.2,0.6));
		victim.A_StartSound("misc/arccrackle",CHAN_AUTO);
		victim.A_StartSound("weapons/plascrack",CHAN_AUTO,volume:frandom(0.2,0.6));
		actor bsfl=spawn("BeamSpotFlashLightRed",victim.pos,ALLOW_REPLACE);
		bsfl.target=victim;

		//make bodies spasm
		if(
			victim.bcorpse
			&&victim.bshootable
			&&victim.mass
			&&!!victim.findstate("dead")
		){
			victim.vel.z+=3.*zappower/victim.mass;
		}

		if(!nodmg){
			victim.damagemobj(inflictor,source,zappower,"electrical",source&&source.player?DMG_PLAYERATTACK:0);
			if(hdmobbase(victim))hdmobbase(victim).stunned+=(zappower>>3);
		}
		return zappower;
	}
	states{
	spawn:
		TNT1 A 1 A_Zap();
		wait;
	}
}

Class BlankPuffUnmaker : Actor
{
	Default
	{
		Height 0;
		VSpeed 0;
		+ALWAYSPUFF
		+NOGRAVITY
		+PUFFONACTORS
		+SKYEXPLODE
		+NOTIMEFREEZE
		+BLOODLESSIMPACT
		+NOTRIGGER
		+THRUACTORS
		+FORCEDECAL
		Decal "";
	}
	States
	{
	Spawn:
		TNT1 A 4;// NoDelay A_SpawnParticle("White",0,1,5);
		Stop;
	}
}