// ------------------------------------------------------------
// The Unmaker
// ------------------------------------------------------------
class HDUnmaker:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "The Unmaker"
		//$Sprite "UMKRZ0"

		+hdweapon.fitsinbackpack
		obituary "$OB_UNMAKER";
		weapon.selectionorder 24;
		weapon.slotnumber 7;
		weapon.slotpriority 0;
		weapon.kickback 30;
		weapon.bobrangex 0.3;
		weapon.bobrangey 0.8;
		weapon.bobspeed 2.5;
		scale 0.7;
		inventory.pickupmessage "$PICKUP_UNMAKER";
		hdweapon.barrelsize 32,3.5,7;
		hdweapon.refid "unm";
		tag "$TAG_UNMAKER";
		inventory.icon "UMKRZ0";
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override double gunmass(){
		return 16;
	}
	override double weaponbulk(){
		return 256;
	}

	static void Spark(actor caller,int sparks=1,double sparkheight=10){
		actor a;vector3 spot;
		vector3 origin=caller.pos+(0,0,sparkheight);
		double spp;double spa;
		for(int i=0;i<sparks;i++){
			spp=caller.pitch+frandom(-20,20);
			spa=caller.angle+frandom(-20,20);
			spot=random(32,57)*(cos(spp)*cos(spa),cos(spp)*sin(spa),-sin(spp));
			a=caller.spawn("UnmakerSpark",origin+spot,ALLOW_REPLACE);
			a.vel+=caller.vel*0.9-spot*0.03;
		}
	}

	override inventory CreateTossable(int amt){
		if((weaponstatus[0]&UNMF_BEAMON)){
			owner.A_StopSound(CHAN_WEAPON);
			owner.A_StartSound("weapons/unmakerbeamend",CHAN_WEAPON);
			weaponstatus[0]&=~UNMF_BEAMON;
			return super.CreateTossable(amt);
		}
		return super.CreateTossable(amt);
	}

	override string gethelptext(){
		return
		"No help text available. Good luck."
		;
	}

	override string,double getpickupsprite(){
		return "UMKRZ0",1.;
	}

	action void A_DisplayThreatMessage()
	{
		let hdp = HDPlayerPawn(self);
		if(random(0,hdp.aggravateddamage)>=25){
		let hdp=HDPlayerPawn(self);
		if(hdp)
			hdp.usegametip("\cx"..HDDemonKeyBase.threat("threats",self));
		}
	}

//y'know i did this because i wanted the zap beam to be red
	static void ThunderZap(
		actor caller,
		double zoffset=32,
		bool alt=false,
		int battery=20
	){
		//determine angle
		double shootangle=caller.angle;
		double shootpitch=caller.pitch;
		vector3 shootpos=(0,0,zoffset);
		let hdp=hdplayerpawn(caller);
		if(hdp){
			shootangle=hdp.gunangle;
			shootpitch=hdp.gunpitch;
			shootpos=hdp.gunpos;
		}
		if(alt){
			shootangle+=frandom(-1.2,1.2);
			shootpitch+=frandom(-1.3,1.1);
		}

		//create the line
		flinetracedata tlt;
		caller.linetrace(
			shootangle,
			8000+200*battery,
			shootpitch,
			flags:TRF_NOSKY|TRF_ABSOFFSET,
			offsetz:shootpos.z,
			offsetforward:shootpos.x,
			offsetside:shootpos.y,
			data:tlt
		);


		if(
			tlt.hittype==Trace_HitNone
			||(
				tlt.hitline&&(
					tlt.hitline.special==Line_Horizon
					||(
						tlt.linepart==2
						&&tlt.hitsector.gettexture(0)==skyflatnum
					)||(
						tlt.linepart==1
						&&tlt.hitline.sidedef[1]
						&&hdmath.oppositesector(tlt.hitline,tlt.hitsector).gettexture(0)==skyflatnum
					)
				)
			)
		)return;

		//alt does a totally different thing
		if(alt){
			if(tlt.hittype==Trace_HitNone||tlt.distance>2000)return;
			actor bbb=spawn("BeamSpotFlashRed",tlt.hitlocation-tlt.hitdir,ALLOW_REPLACE);
			bbb.setz(clamp(bbb.pos.z,bbb.floorz,bbb.ceilingz-8));
			if(!random(0,3))(lingeringthunder.zap(bbb,bbb,caller,40,true));
			beamspotflash(bbb).impactdistance=tlt.distance-16*battery;
			bbb.angle=caller.angle;
			bbb.A_SprayDecal("Scorch",12);
			bbb.pitch=caller.pitch;
			bbb.target=caller;
			bbb.tracer=tlt.hitactor; //damage inflicted on the puff's end
			if(tlt.hitline)doordestroyer.CheckDirtyWindowBreak(tlt.hitline,0.005*battery,tlt.hitlocation);
			return;
		}

		int basedmg=int(max(0,20-tlt.distance*(1./50.)));
		int dmgflags=caller&&caller.player?DMG_PLAYERATTACK:0; //don't know why the player damagemobj doesn't work

		if(tlt.hitline)doordestroyer.CheckDirtyWindowBreak(tlt.hitline,0.003*basedmg,tlt.hitlocation);

		//wet actor
		if(
			tlt.hitactor
		){
			actor hitactor=tlt.hitactor;
			if(hitactor.bloodtype=="ShieldNotBlood"){
				hitactor.damagemobj(null,caller,random(1,(battery<<2)),"Balefire",dmgflags);
			}else if(
				hitactor.bnodamage
				||hitactor.bnoblood
				||hitactor.bloodtype=="NotQuiteBloodSplat"
				||random(0,7)
				||hitactor.countinv("ImmunityToFire")
				||HDWoundFixer.CheckCovered(hitactor,true)
			){
				//dry actor - ping damage and continue
				if(!random(0,5))(lingeringthunder.zap(hitactor,hitactor,caller,40,true));
				hdf.give(hitactor,"Heat",(basedmg>>1));
				hitactor.damagemobj(null,caller,1,"electrical",dmgflags);
			}else{
				//wet actor
				if(!random(0,7))(lingeringthunder.zap(hitactor,hitactor,caller,(basedmg<<1),true));
				hdf.give(hitactor,"Heat",(basedmg<<1));
				hitactor.damagemobj(null,caller,basedmg,"electrical",dmgflags);
				actor sss=spawn("HDGunsmoke",tlt.hitlocation,ALLOW_REPLACE);
				sss.vel=(0,0,1)-tlt.hitdir;
				return;
			}
		}
		//where where the magic happens happens
		actor bbb=spawn("BeamSpotRed",tlt.hitlocation-tlt.hitdir,ALLOW_REPLACE);
		bbb.setz(clamp(bbb.pos.z,bbb.floorz,bbb.ceilingz-8));
		bbb.target=caller;
		bbb.stamina=basedmg;
		bbb.angle=caller.angle;
		bbb.pitch=caller.pitch;
	}

//kaboom
	action void A_ThunderZap(){
		hdunmaker.thunderzap(self,32,0,50);
	}

	action void A_EgonBeam(actor caller,bool lastshot=false){
		//determine angle
		double shootangle=caller.angle;
		double shootpitch=caller.pitch;
		vector3 shootpos=(0,0,32);
		let hdp=hdplayerpawn(caller);
		if(hdp){
			shootangle=hdp.gunangle;
			shootpitch=hdp.gunpitch;
			shootpos=hdp.gunpos;
		}

		//create the line
		flinetracedata tlt;
		caller.linetrace(
			shootangle,
			0x7ffffff,
			shootpitch,
			flags:TRF_ABSOFFSET,
			offsetz:shootpos.z,
			offsetforward:shootpos.x,
			offsetside:shootpos.y,
			data:tlt
		);


		if(
			tlt.hittype==Trace_HitNone
			||(
				tlt.hitline&&(
					tlt.hitline.special==Line_Horizon
					||(
						tlt.linepart==2
						&&tlt.hitsector.gettexture(0)==skyflatnum
					)||(
						tlt.linepart==1
						&&tlt.hitline.sidedef[1]
						&&hdmath.oppositesector(tlt.hitline,tlt.hitsector).gettexture(0)==skyflatnum
					)
				)
			)
		)return;

		if(tlt.hitline)doordestroyer.CheckDirtyWindowBreak(tlt.hitline,0.003*60,tlt.hitlocation);

		//failsafe
		if(
			tlt.hitactor
		){
			actor hitactor=tlt.hitactor;
			hitactor.damagemobj(null,caller,random(100,150),"unmaker",DMG_PLAYERATTACK);
		}

		//where where the magic happens happens
		actor bbb=spawn("EgonUnmaker",tlt.hitlocation,ALLOW_REPLACE);
		bbb.setz(clamp(bbb.pos.z,bbb.floorz,bbb.ceilingz-8));
		bbb.target=caller;
		bbb.angle=caller.angle;
		bbb.pitch=caller.pitch;
		bbb.master=caller;
		if(lastshot)bbb.accuracy=1;
	}

	actor ShootBall(actor inflictor,actor source){
		inflictor.A_StartSound("weapons/bfgfwoosh",CHAN_WEAPON,CHANF_OVERLAP);
		let hdp=hdplayerpawn(source);
		if(
			inflictor.findinventory("UnmakerUpgrade1Icon")
		)hdp.aggravateddamage+=10;
		else hdp.aggravateddamage+=25;
		weaponstatus[UNMS_CRITTIMER]=0;

		vector3 ballvel=(cos(inflictor.pitch)*(cos(inflictor.angle),sin(inflictor.angle)),-sin(inflictor.pitch));

		vector3 spawnpos=(inflictor.pos.xy,inflictor.pos.z+inflictor.height*0.8)+ballvel*6;
		if(inflictor.viewpos)spawnpos+=inflictor.viewpos.offset;

		let bbb=spawn("ArmageddonBall",spawnpos);
		if(bbb){
			bbb.target=source;
			bbb.master=source;
			bbb.pitch=inflictor.pitch;
			bbb.angle=inflictor.angle;
			bbb.vel=inflictor.vel+ballvel*bbb.speed;
		}
		return bbb;
	}

	states{
	ThreatCheck:
		TNT1 A 10 A_DisplayThreatMessage();
		loop;

	select0:
		UMKR A 0{
				A_Overlay(16,"ThreatCheck");
			}
		goto select0bfg;
	deselect0:
		UMKR A 0{
				if(invoker.weaponstatus[0]&UNMF_BEAMON){
				A_StartSound("weapons/unmakerbeamend",CHAN_WEAPON);
				invoker.weaponstatus[0]&=~UNMF_BEAMON;
				}
			}
		goto deselect0big;

	select1:
		UMKR A 0 A_Overlay(16,"ThreatCheck");
		goto select1bfg;
	deselect1:
		UMKR A 0{
				if(invoker.weaponstatus[0]&UNMF_BEAMON){
				A_StartSound("weapons/unmakerbeamend",CHAN_WEAPON);
				invoker.weaponstatus[0]&=~UNMF_BEAMON;
				}
			}
		goto deselect1big;

	ready:
		UMKR A 1{
			let hdp = HDPlayerPawn(self);
			if(hdp&&hdp.aggravateddamage>=50){
				setweaponstate("commitdie");
			}
			A_WeaponReady(WRF_ALL);
		}
		goto readyend;

	CommitDie:
		UMKR A 0 A_ClearRefire(); //mugshot.
		//THERE IS NO GOD BUT ME.
		//UMKR A 0 A_JumpIfInventory("HDBible",1,"NotThisTimeBible");
		//UMKR A 0 A_JumpIfInventory("HDHolyWater",1,"NotThisTimeHolyWater");
		//UMKR A 0 A_JumpIfInventory("HDCrucifix",1,"NotThisTimeCrucifix");
		//UMKR A 0 A_JumpIfInventory("HDChalice",1,"NotThisTimeChalice");
		//UMKR A 0 A_JumpIfInventory("HDRosary",1,"NotThisTimeRosary");

		UMKR A 0{
			A_Quake(5,40,0,512,"brain/cube");
			invoker.buntossable=true;
			A_StartSound("misc/smallslop",CHAN_AUTO);
		}
		UMKR AAAAABB 1 A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		UMKR B 1{
			A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
			damagemobj(self,self,min(health,26),"balefire",DMG_FORCED);
			A_StartSound("misc/bulletflesh",CHAN_AUTO);
		}
		UMKR BAAAAABBBBAAAAABBBBAAAABBAABBAABB 1 A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		UMKR A 1{
				let archon = spawn("BaronUnmaker",pos,
				ALLOW_REPLACE);
				if(archon){
				archon.translation=translation;
				archon.angle=angle;
				archon.pitch=pitch;
				if(findinventory("UnmakerUpgrade1Icon")){
			archon.A_GiveInventory("UnmakerUpgrade1Icon");
			A_TakeInventory("UnmakerUpgrade1Icon",1);
		}
				if(findinventory("UnmakerUpgrade2Icon")){
			archon.A_GiveInventory("UnmakerUpgrade2Icon");
			A_TakeInventory("UnmakerUpgrade2Icon",1);
		}
				if(findinventory("UnmakerUpgrade3Icon")){
			archon.A_GiveInventory("UnmakerUpgrade3Icon");
			A_TakeInventory("UnmakerUpgrade3Icon",1);
			}
		}
	}
		UMKR A 1{
			damagemobj(invoker,self,10000,"suicide");
			A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
			invoker.buntossable=false;
			for(int i=45;i<360;i+=90){
				A_SpawnItemEx("HDExplosion",
					4,-4,20,vel.x,vel.y,vel.z+1,i,
					SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_ABSOLUTEMOMENTUM
				);
				A_SpawnItemEx("HDSmokeChunk",0,0,0,
					vel.x+frandom(-12,12),
					vel.y+random(-12,12),
					vel.z+frandom(4,16),
					0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
				);
			}
			A_Quake(3,26,0,220,"none");
			invoker.destroy();
		}
		goto ready;

	altfire:
		UMKR B 0{
			if(pressingzoom() && (findinventory("UnmakerUpgrade1Icon")||findinventory("UnmakerUpgrade2Icon")||findinventory("UnmakerUpgrade3Icon")))setweaponstate("Egon");
		}
		UMKR BBBBBBBBBBBBBBBBBB 0 bright light("FIRE")A_ThunderZap(); //doubled it. take it or leave it.
		UMKR B 1{
				A_GunFlash();
			}
		UMKR AAAAA 1;
		UMKR A 1{
			let hdp=HDPlayerPawn(self);

			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,12)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,6)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			A_WeaponReady(WRF_NOFIRE);

			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("commitdie");
		}
		goto nope;
	althold:
		goto nope;

	fire:
		UMKR A 0{
			int keycount = 0;
			if(findinventory("UnmakerUpgrade1Icon"))keycount++;
			if(findinventory("UnmakerUpgrade2Icon"))keycount++;
			if(findinventory("UnmakerUpgrade3Icon"))keycount++;

			if(keycount==3 && pressingzoom()){
				invoker.weaponstatus[UNMS_TIMER]=0;
				setweaponstate("charge");
			}
			else if(keycount==3)setweaponstate("ThreeBeams");
			else if(keycount==2)setweaponstate("TwoBeams");
			else if(keycount==1)setweaponstate("FullAutoBeam");
		}
		UMKR B 1{
			A_GunFlash();
			vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBeam").height));
			let ggg=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));

			let hdp=hdplayerpawn(self);
			if(hdp){
				ggg.angle=hdp.gunangle;
				ggg.pitch=hdp.gunpitch;
			}else{
				ggg.angle=angle;
				ggg.pitch=pitch;
			}

			ggg.target=self;ggg.master=self;
		}
		UMKR A 1{
			let hdp=HDPlayerPawn(self);

			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,32)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,16)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			A_WeaponReady(WRF_NOFIRE);
		}
		goto nope;

	FullAutoBeam:
		UMKR B 1{
			A_GunFlash();
			vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBeam").height));
			let ggg=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));

			let hdp=hdplayerpawn(self);
			if(hdp){
				ggg.angle=hdp.gunangle;
				ggg.pitch=hdp.gunpitch;
			}else{
				ggg.angle=angle;
				ggg.pitch=pitch;
			}

			ggg.target=self;ggg.master=self;
			}
		UMKR AAAAA 1 A_WeaponReady(WRF_NONE);
		UMKR A 0{
			let hdp=HDPlayerPawn(self);

			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,32)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,16)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			A_WeaponReady(WRF_NOFIRE);

			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("commitdie");
		}
		UMKR A 0 A_Refire("FullAutoBeam");
		goto nope;

	TwoBeams:
		UMKR B 1{
			A_GunFlash();
			vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBeam").height));
			let ggg=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));
			let ggg2=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));

			let hdp=hdplayerpawn(self);
			if(hdp){
				ggg.angle=hdp.gunangle+2;
				ggg.pitch=hdp.gunpitch;
				ggg2.angle=hdp.gunangle-2;
				ggg2.pitch=hdp.gunpitch;
			}else{
				ggg.angle=angle+2;
				ggg.pitch=pitch;
				ggg2.angle=angle-2;
				ggg2.pitch=pitch;
			}

			ggg.target=self;ggg.master=self;ggg2.target=self;ggg2.master=self;
		}
		UMKR AAAAA 1 A_WeaponReady(WRF_NONE);
		UMKR A 0{
			let hdp=HDPlayerPawn(self);


			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,28)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,14)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			A_WeaponReady(WRF_NOFIRE);

			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("commitdie");
		}
		UMKR A 0 A_Refire("TwoBeams");
		goto nope;


	ThreeBeams:
		UMKR B 1{
			A_GunFlash();
			vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBeam").height));
			let ggg=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));
			let ggg2=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));
			let ggg3=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));

			let hdp=hdplayerpawn(self);
			if(hdp){
				ggg.angle=hdp.gunangle+3;
				ggg.pitch=hdp.gunpitch;
				ggg2.angle=hdp.gunangle-3;
				ggg2.pitch=hdp.gunpitch;
				ggg3.angle=hdp.gunangle;
				ggg3.pitch=hdp.gunpitch;
			}else{
				ggg.angle=angle+3;
				ggg.pitch=pitch;
				ggg2.angle=angle-3;
				ggg2.pitch=pitch;
				ggg3.angle=angle;
				ggg3.pitch=pitch;
			}

			ggg.target=self;ggg.master=self;
			ggg2.target=self;ggg2.master=self;
			ggg3.target=self;ggg3.master=self;
		}
		UMKR AAAAA 1 A_WeaponReady(WRF_NONE);
		UMKR A 0{
			let hdp=HDPlayerPawn(self);


			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,24)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,12)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			A_WeaponReady(WRF_NOFIRE);

			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("commitdie");
		}
		UMKR A 0 A_Refire("ThreeBeams");
		goto nope;

	flash:
		UMKR B 0{
			A_AlertMonsters();
			A_ZoomRecoil(0.95);
		}
		UMKR F 1 bright{
			HDFlashAlpha(32);
			A_Light1();
		}
		TNT1 A 0 A_MuzzleClimb(-frandom(0.34,0.4),-frandom(0.5,0.6),-frandom(0.34,0.4),-frandom(0.5,0.6));
		UMKR A 0{
			int keycount = 0;
			if(findinventory("UnmakerUpgrade1Icon"))keycount++;
			if(findinventory("UnmakerUpgrade2Icon"))keycount++;
			if(findinventory("UnmakerUpgrade3Icon"))keycount++;

			if(keycount==3)A_StartSound("weapons/unmaker3",CHAN_WEAPON,volume:2.5);
			else if(keycount==2)A_StartSound("weapons/unmaker2",CHAN_WEAPON,volume:2.5);
			else A_StartSound("weapons/unmaker",CHAN_WEAPON,volume:1);
		}
		goto lightdone;

	flashegon:
		UMKR G 1 bright{
			A_AlertMonsters();
			A_ZoomRecoil(0.8);
			HDFlashAlpha(96);
			A_Light1();
			//A_MuzzleClimb(-frandom(0.2,0.24),-frandom(0.3,0.36),-frandom(0.2,0.24),-frandom(0.3,0.36));
			HDMobAI.Frighten(self,512);
			double pushforce=frandom(0.001,0.15)*player.crouchfactor;
				A_ChangeVelocity(
					cos(pitch)*-pushforce,0,
					sin(pitch)*pushforce,
					CVF_RELATIVE
				);
		}
		goto lightdone;

	flashegon2:
		UMKR H 1 bright{
			A_AlertMonsters();
			A_ZoomRecoil(0.8);
			HDFlashAlpha(96);
			A_Light1();
			//A_MuzzleClimb(-frandom(0.2,0.24),-frandom(0.3,0.36),-frandom(0.2,0.24),-frandom(0.3,0.36));
			HDMobAI.Frighten(self,512);
			double pushforce=frandom(0.001,0.15)*player.crouchfactor;
				A_ChangeVelocity(
					cos(pitch)*-pushforce,0,
					sin(pitch)*pushforce,
					CVF_RELATIVE
				);
		}
		goto lightdone;

	flasharmaggedon:
		UMKR G 2 bright{
			A_Light2();
			HDFlashAlpha(200);
		}
		#### H 2 bright HDFlashAlpha(128);
		goto lightdone;

	Egon:
		UMKR A 0{
			invoker.weaponstatus[UNMS_EGONTICS]=0;
			invoker.weaponstatus[0]|=UNMF_BEAMON;
			A_StartSound("weapons/unmakerbeamstart",CHAN_WEAPON);
		}
	EgonLoop:
		UMKR B 1{
			A_GunFlash("flashegon");
			A_EgonBeam(self);
			invoker.weaponstatus[UNMS_EGONTICS]++;

			let hdp=HDPlayerPawn(self);

			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,18)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,6)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("EgonEnd");
			}
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_EGONTICS]>105)A_Refire("EgonLoop2B");
		}
		UMKR A 0 A_Refire("EgonLoopB");
		goto EgonEnd;
	EgonLoopB:
		UMKR B 1{
			A_GunFlash("flashegon2");
			A_EgonBeam(self);
			invoker.weaponstatus[UNMS_EGONTICS]++;

			let hdp=HDPlayerPawn(self);

			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,18)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,6)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("EgonEnd");
			}
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_EGONTICS]>105)A_Refire("EgonLoop2");
		}
		UMKR A 0 A_Refire("EgonLoop");
		goto EgonEnd;

	EgonLoop2:
		UMKR A 0{;
			A_StartSound("weapons/unmakerbeamloop",CHAN_WEAPON,CHANF_LOOPING);
		}
	EgonLoop3:
		UMKR B 1{
			A_GunFlash("flashegon");
			A_EgonBeam(self);

			let hdp=HDPlayerPawn(self);

			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,18)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,6)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("EgonEnd");
			}
		UMKR A 0 A_Refire("EgonLoop3B");
		goto EgonEnd;

	EgonLoop2B:
		UMKR A 0{;
			A_StartSound("weapons/unmakerbeamloop",CHAN_WEAPON,CHANF_LOOPING);
		}
	EgonLoop3B:
		UMKR B 1{
			A_GunFlash("flashegon2");
			A_EgonBeam(self);

			let hdp=HDPlayerPawn(self);

			if(findinventory("UnmakerUpgrade1Icon")){
				if(hdp&&!random(0,18)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			}
			else if(hdp&&!random(0,6)){if(countinv("HealingMagic")>=5)A_TakeInventory("HealingMagic",5);else{hdp.aggravateddamage++;damagemobj(self,self,1,"Hot",DMG_NO_PROTECT);}}
			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("EgonEnd");
			}
		UMKR A 0 A_Refire("EgonLoop3");
		goto EgonEnd;

	EgonEnd:
		UMKR B 1{
			invoker.weaponstatus[0]&=~UNMF_BEAMON;
			A_StartSound("weapons/unmakerbeamend",CHAN_WEAPON);
			A_EgonBeam(self,true);

			let hdp=HDPlayerPawn(self);
			if(hdp&&hdp.aggravateddamage>=50)
				setweaponstate("commitdie");
		}
		UMKR A 1;
		UMKR A 1 A_WeaponReady(WRF_NOFIRE);
		goto nope;

	charge:
		#### B 1{
			HDUnmaker.Spark(self,1,gunheight()-2);
			A_StartSound("weapons/bfgcharge",(invoker.weaponstatus[UNMS_TIMER]>6)?CHAN_AUTO:CHAN_WEAPON);
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_NOFIRE|WRF_DISABLESWITCH);
			A_SetTics(max(1,6-int(invoker.weaponstatus[UNMS_TIMER]*0.3)));
			invoker.weaponstatus[UNMS_TIMER]++;
		}
		#### B 0{
			if(invoker.weaponstatus[UNMS_TIMER]>14)A_Refire("shoot");
			else A_Refire("charge");
		}goto ready;
	shoot:
		#### B 0{
			invoker.weaponstatus[UNMS_TIMER]=0;
			invoker.weaponstatus[UNMS_CRITTIMER]=16;
			A_StartSound("unmaker/blackholeshoot",CHAN_WEAPON);
			hdmobai.frighten(self,512);
		}
		#### B 3{
			invoker.weaponstatus[UNMS_CRITTIMER]--;
			A_StartSound("weapons/bfgcharge",random(9005,9007));
			HDUnmaker.Spark(self,1,gunheight()-2);
			if(invoker.weaponstatus[UNMS_CRITTIMER]<=1){
				invoker.weaponstatus[UNMS_CRITTIMER]=0;
				player.setpsprite(PSP_WEAPON,invoker.findstate("reallyshoot"));
			}else if(invoker.weaponstatus[UNMS_CRITTIMER]<10)A_SetTics(2);
			else if(invoker.weaponstatus[UNMS_CRITTIMER]<5)A_SetTics(1);
		}wait;
	reallyshoot:
		#### B 8{
			A_AlertMonsters();
			hdmobai.frighten(self,1024);
		}
		#### B 2{
			A_ZoomRecoil(0.2);
			A_GunFlash("flasharmaggedon");
			invoker.ShootBall(self,self);
		}
		#### BBBB 1 A_ChangeVelocity(-0.3,0,0.06,CVF_RELATIVE);
		#### BBAA 1{
			A_MuzzleClimb(
				0.1,0.2,
				-frandom(0.08,0.1),-frandom(0.2,0.3),
				-frandom(0.18,0.24),-frandom(0.6,0.8),
				0.1,0.15
			);
		}goto nope;

	unload:
		//abort if no keys to unload
		UMKR A 0{
			int keycount = 0;
			if(findinventory("UnmakerUpgrade1Icon"))keycount++;
			if(findinventory("UnmakerUpgrade2Icon"))keycount++;
			if(findinventory("UnmakerUpgrade3Icon"))keycount++;

			if(keycount>0)setweaponstate("lowertoopen");
		}
		goto nope;

	//lower the weapon, open it, decide what to do
	lowertoopen:
		UMKR A 2 offset(0,36);
		UMKR A 2 offset(4,38){
			A_StartSound("misc/gibbed",CHAN_WEAPON);
			A_MuzzleClimb(-frandom(1.2,1.8),-frandom(1.8,2.4));
		}
		UMKR A 6 offset(9,41)A_StartSound("misc/smallslop",CHAN_AUTO);
		UMKR A 8 offset(12,43)A_StartSound("misc/bulletflesh",CHAN_WEAPON);
		UMKR A 5 offset(10,41)A_StartSound("misc/bulletflesh",CHAN_AUTO);
	slop:
		UMKR A 10 offset(11,42){
			if(findinventory("UnmakerUpgrade3Icon")){
				A_SetTics(4);
				A_DropItem("HDCyanDemonKey");
				A_TakeInventory("UnmakerUpgrade3Icon",1);
			}else if(findinventory("UnmakerUpgrade2Icon")){
				A_SetTics(4);
				A_DropItem("HDPurpleDemonKey");
				A_TakeInventory("UnmakerUpgrade2Icon",1);
			}else{
				A_SetTics(4);
				A_DropItem("HDOrangeDemonKey");
				A_TakeInventory("UnmakerUpgrade1Icon",1);
			}
			A_StartSound("misc/smallslop",CHAN_AUTO);
		}
		goto unloadend;

	unloadend:
		UMKR A 3 offset(9,41);
		UMKR A 2 offset(6,38);
		UMKR A 3 offset(2,34);
		goto ready;

	spawn:
		UMKR Z -1 nodelay{
			if(invoker.weaponstatus[UNMS_CRITTIMER]>0)invoker.setstatelabel("bwahahahaha");
		}
	bwahahahaha:
		UMKR Z 3{
			invoker.weaponstatus[UNMS_CRITTIMER]--;
			A_StartSound("weapons/bfgcharge",CHAN_AUTO);
			HDUnmaker.Spark(self,1,6);
			let ct=invoker.weaponstatus[UNMS_CRITTIMER];
			if(ct<=1){
				invoker.weaponstatus[UNMS_CRITTIMER]=0;
				invoker.setstatelabel("heh");
			}else if(ct<5)A_SetTics(1);
			else if(ct<10)A_SetTics(2);
		}wait;
	heh:
		UMKR Z 8;
		UMKR Z 4{
			invoker.A_StartSound("weapons/bfgfwoosh",CHAN_AUTO);
			invoker.weaponstatus[UNMS_CRITTIMER]=0;
			invoker.ShootBall(invoker,invoker.lastenemy);
		}
		UMKR Z 0{
			invoker.A_ChangeVelocity(-cos(pitch)*4,0,sin(pitch)*4,CVF_RELATIVE);
		}goto spawn;
	}
}
enum unmakerstatus{
	UNMF_BEAMON=1,

	UNMS_EGONTICS=0,
	UNMS_TIMER=1,
	UNMS_CRITTIMER=2,
};