class HDReligiousItems:HDInvRandomSpawner{
	default{
		//dropitem "HDRosary",100,20;
		dropitem "HDChalice",96,2;
		//dropitem "HDHolyWater",72,1;
		dropitem "HDCrucifix",48,1;
		dropitem "HDBible",48,1;
	}
}

//consume the chalice

class HDChalice:hdinjectormaker{
	default{
		//$Category "Items/Hideous Destructor/Supplies/HDUnmaker"
		//$Title "The Silver Chalice"
		//$Sprite "CHLCA0"

		inventory.pickupmessage "$PICKUP_CHALICE";
		inventory.pickupsound "potion/swish";
		inventory.icon "CHLCA0";
		scale 0.3;
		tag "$TAG_CHALICE";
		hdmagammo.maxperunit HDHM_BOTTLE;
		hdmagammo.magbulk ENC_POTION*2;
		//hdmagammo.roundbulk ENC_POTION*0.04;
		+inventory.ishealth
		hdinjectormaker.injectortype "HDChalicer";
		hdpickup.refid "chl";
	}
	override string,string,name,double getmagsprite(int thismagamt){
		return "CHLCA0","TNT1A0","HDChalice",0.3;
	}
	override int getsbarnum(int flags){return mags.size()?mags[0]:0;}
	override bool Extract(){return false;}
	override bool Insert(){
		if(amount<2)return false;
		int lowindex=mags.size()-1;
		if(
			mags[lowindex]>=maxperunit
			||mags[0]<1
		)return false;
		mags[0]--;
		mags[lowindex]++;
		owner.A_StartSound("potion/swish",8);
/*
		if(mags[0]<1){
			mags.delete(0);
			amount--;
			owner.A_StartSound("potion/open",CHAN_WEAPON);
			actor a=owner.spawn("SpentBottle",(owner.pos.xy,owner.pos.z+owner.height*0.8),ALLOW_REPLACE);
			a.angle=owner.angle+2;a.vel=owner.vel;a.A_ChangeVelocity(3,1,4,CVF_RELATIVE);
			a=owner.spawn("SpentCork",(owner.pos.xy,owner.pos.z+owner.height*0.8),ALLOW_REPLACE);
			a.angle=owner.angle+3;a.vel=owner.vel;a.A_ChangeVelocity(5,3,4,CVF_RELATIVE);
		}
*/
		return true;
	}

	bool isregenerating;
	int regentimer;
	int dropped;

	override void doeffect(){
		super.doeffect();
				dropped=0;
		let hdp=HDPlayerPawn(owner);
		if(hdp)
		if(isregenerating&&regentimer){
			regentimer--;
			if(regentimer==1){
				isregenerating=false;
				mags[0]=12;
		}
	}
}

	override void tick(){
		super.tick();
		if(isregenerating&&regentimer&&dropped){
			regentimer--;
			if(regentimer==1){
				isregenerating=false;
				mags[0]=12;
				dropped=0;
		}
	}
}

	states{
	use:
		TNT1 A 0 A_JumpIf(
			player.cmd.buttons&BT_USE
			&&(
				!findinventory("HDChalicer")
				||!HDChalicer(findinventory("HDChalicer")).bweaponbusy
			)
		,1);
		goto super::use;
	cycle:
		TNT1 A 0{
			invoker.syncamount();
			int firstbak=invoker.mags[0];
			int limamt=invoker.amount-1;
			for(int i=0;i<limamt;i++){
				invoker.mags[i]=invoker.mags[i+1];
			}
			invoker.mags[limamt]=firstbak;
			A_StartSound("potion/swish",CHAN_WEAPON,CHANF_OVERLAP,0.5);
			A_StartSound("weapons/pocket",9,volume:0.3);
		}fail;
	spawn:
		CHLC A -1;
		stop;
	}
}

class HDChalicer:HDWoundFixer{
	default{
		weapon.selectionorder 1000;
		tag "$TAG_CHALICE";
	}
	override string,double getpickupsprite(){return "CHLCA0",1.;}
	override string gethelptext(){
		return WEPHELP_FIRE.."  Drink\n"
		..WEPHELP_USE.." + "..WEPHELP_USE.."(item)  Cycle"
		;
	}

	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		sb.drawimage(
			"CHLCA0",(-23,-7),
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_RIGHT
		);
		sb.drawwepnum(hdw.weaponstatus[INJECTS_AMOUNT],HDHM_BOTTLE);
	}

	bool isregenerating;
	int regentimer;

	override void doeffect(){
		super.doeffect();
		if(regentimer>0&&isregenerating){
			regentimer--;
			if(regentimer<=1){
				isregenerating=false;
				weaponstatus[INJECTS_AMOUNT]=12;
		}
	}
}

	override void tick(){
		super.tick();
		if(regentimer>0&&isregenerating){
			regentimer--;
			if(regentimer<=1){
				isregenerating=false;
				weaponstatus[INJECTS_AMOUNT]=12;
		}
	}
}

	states{
	spawn:
		TNT1 A 1{	invoker.weaponstatus[CHLCE_DROPPED]=1;}
		TNT1 A 0{
			int amt=invoker.weaponstatus[INJECTS_AMOUNT];
			actor a=null;
			if(amt>0){
				a=spawn("HDChalice",invoker.pos,ALLOW_REPLACE);
				a.A_StartSound("potion/swish",CHAN_BODY);
				if(HDChalice(a))HDChalice(a).mags[0]=amt;
				HDChalice(a).isregenerating=invoker.isregenerating;
				HDChalice(a).regentimer=invoker.regentimer;
				HDChalice(a).dropped=invoker.weaponstatus[CHLCE_DROPPED];
			}else{
			a=spawn("HDChalice",invoker.pos,ALLOW_REPLACE);
				if(HDChalice(a))HDChalice(a).mags[0]=amt;
				a.A_StartSound("potion/away",CHAN_BODY);
				HDChalice(a).isregenerating=invoker.isregenerating;
				HDChalice(a).regentimer=invoker.regentimer;
	HDChalice(a).dropped=invoker.weaponstatus[CHLCE_DROPPED];
			}
			a.angle=self.angle;a.vel=self.vel;
			a.target=self;
			a.vel=vel;

			//if dropped while sprinting, treat as dropped one from inventory
			let hdp=HDPlayerPawn(target);
			if(
				!!hdp
				&&!!hdp.player
				&&!!NullWeapon(hdp.player.readyweapon)
			){
				let iii=HDInjectorMaker(hdp.findinventory("HDChalice"));
				if(
					!!iii
					&&iii.amount>0
				){
					iii.SyncAmount();
					if(HDChalice(a))HDChalice(a).mags[0]=iii.mags[0];
				invoker.isregenerating=HDChalice(a).isregenerating;
				invoker.regentimer=HDChalice(a).regentimer;

					invoker.weaponstatus[0]^=~INJECTF_SPENT;
					invoker.weaponstatus[INJECTS_AMOUNT]=iii.mags[0];
					iii.mags.delete(0);
					iii.amount--;
				}
			}
		}
		stop;
	select:
		TNT1 A 0{
			if(DoHelpText())A_WeaponMessage(Stringtable.Localize("$CHALICE_TEXT1"));
			A_StartSound("potion/swish",8,CHANF_OVERLAP);

			let iii=HDChalice(findinventory("HDChalice"));
			if(
				!!iii
				&&iii.amount>0
			){
				iii.SyncAmount();
				invoker.weaponstatus[INJECTS_AMOUNT]=iii.mags[0];
			if(iii.isregenerating&&iii.regentimer){
				invoker.isregenerating=iii.isregenerating;
				invoker.regentimer=iii.regentimer;
				}
				iii.mags.delete(0);
				iii.amount--;
			}
		}
		goto super::select;
	deselect:
		TNT1 A 10 A_StartSound("potion/swish",8,CHANF_OVERLAP);
		TNT1 A 0{
			/*if(invoker.weaponstatus[INJECTS_AMOUNT]<1){
				DropInventory(invoker);
				return;
			}*/

			//make sure the last used one appears at the top
			let iii=HDChalice(findinventory("HDChalice"));
			if(!!iii){
			if(invoker.isregenerating&&invoker.regentimer){
				iii.isregenerating=invoker.isregenerating;
				iii.regentimer=invoker.regentimer;
				}
				iii.mags.insert(0,invoker.weaponstatus[INJECTS_AMOUNT]);
				iii.amount++;
			}else HDMagAmmo.GiveMag(self,"HDChalice",invoker.weaponstatus[INJECTS_AMOUNT]);
/*
			if(invoker.isregenerating&&invoker.regentimer){
				iii.isregenerating=invoker.isregenerating;
				iii.regentimer=invoker.regentimer;
				}
*/
		}
		TNT1 A 0 A_Lower(999);
		wait;
	fire:
		TNT1 A 0{
			let blockinv=HDWoundFixer.CheckCovered(self,CHECKCOV_CHECKFACE);
			if(blockinv){
				A_TakeOffFirst(blockinv.gettag(),2);
				A_Refire("nope");
			}
		}
		TNT1 A 4 A_WeaponReady(WRF_NOFIRE);
		TNT1 A 1{
			A_StartSound("potion/open",CHAN_WEAPON);
			A_Refire();
		}
		TNT1 A 0 A_StartSound("potion/swish",8);
		goto nope;
	hold:
		TNT1 A 1;
		TNT1 A 0{
			A_WeaponBusy();
			let blockinv=HDWoundFixer.CheckCovered(self,CHECKCOV_CHECKFACE);
			if(blockinv){
				A_TakeOffFirst(blockinv.gettag(),2);
				A_Refire("nope");
			}else if(pitch>-55){
				A_MuzzleClimb(0,-8);
				A_Refire();
			}else{
				A_Refire("inject");
			}
		}
		TNT1 A 0 A_StartSound("potion/away",CHAN_WEAPON,volume:0.4);
		goto nope;
	inject:
		TNT1 A 7{
			A_MuzzleClimb(0,-2);
			if(invoker.weaponstatus[INJECTS_AMOUNT]>0){
				invoker.weaponstatus[INJECTS_AMOUNT]--;
				A_StartSound("potion/chug",CHAN_VOICE);
				let hdp=HDPlayerPawn(self);
				if(hdp)hdp.bloodloss-=2;
			}
		}
		TNT1 AAAAA 1 A_MuzzleClimb(0,0.5);
		TNT1 A 5 A_JumpIf(!pressingfire(),"injectend");
		goto hold;
	injectend:
		TNT1 A 6;
		TNT1 A 0{
			if(invoker.weaponstatus[INJECTS_AMOUNT]>0){
			A_StartSound("potion/swish",CHAN_WEAPON,volume:0.4);
			}else{
			A_StartSound("potion/away",CHAN_WEAPON,volume:0.4);
			if(!invoker.isregenerating){
			invoker.isregenerating=true;
			invoker.regentimer=640;
				}
			}
		}
		goto nope;
	}
}
enum chalicestatus{

	CHLCE_FLAGS=0,
	CHLCE_DROPPED=1,
};

//NOTICE: THE KJV VERSION OF PSALMS IS PROTECTED
//BY THE SPECIAL UK CROWN COPYRIGHT LICENSE.
//I, CLANCE B. BENITEZ, WILL NOT BE RESPONSIBLE FOR
//ANY COPYRIGHT INFRINGEMENTS ON ANYONE FOR GRABBING
//ANY VERSE FROM THE PSALMS FILE WITHOUT PERMISSION OF THE OWNERS.
//(ps: although despite me not knowing much about the license, please do credit the site should you grabbed any portion of the psalms file)

class HDBible:HDPickup{
	default{
		//$Category "Items/Hideous Destructor/Supplies/HDUnmaker"
		//$Title "The Bible"
		//$Sprite "BIBLA0"

		-hdpickup.droptranslation
		inventory.pickupmessage "$PICKUP_BIBLE";
		inventory.icon "BIBLA0";
		scale 0.4;
		hdpickup.bulk ENC_MEDIKIT;
		tag "$TAG_BIBLE";
		hdpickup.refid "bbl";
	}

//grabbed from the old spiritual armour code.
	const pscol="\cy";
	static string FromPsalter(){
		string psss=Wads.ReadLump(Wads.CheckNumForName("psalms",0));
		array<string> pss;pss.clear();
		psss.split(pss,"Psalm ");
		pss.delete(0); //don't get anything before "Psalm 1:1"
		string ps=pss[random(0,pss.size()-1)];
		ps=ps.mid(ps.indexof(" ")+1);
		ps=pscol..ps;
		ps.replace("/","\n"..pscol);
		ps.replace("|"," ");
		ps.replace("  "," ");
		ps.replace("\n"..pscol.." ","\n"..pscol);
		return ps;
	}

	states{
	spawn:
		BIBL A -1{
			brollsprite=true;brollcenter=true;
			roll=random(0,359);
		}stop;
	use:
		TNT1 A 0{
			let hdp=HDPlayerPawn(self);
			hdmobai.frighten(self,256);
			hdp.usegametip("\cx"..HDBible.FromPsalter());
				}
		fail;
	}
}

//The Crucifix
//makes the demons go away
//or get immolated

//yeah i'm weird with the habit of copy-pasting
class HDCrucifix:HDInjectorMaker{
	default{
		//$Category "Items/Hideous Destructor/Supplies/HDUnmaker"
		//$Title "The Crucifix"
		//$Sprite "CRUXA0"

		scale 0.46;
		-hdpickup.droptranslation
		inventory.pickupmessage "$PICKUP_CRUCIFIX";
		inventory.icon "CRUXA0";
		hdpickup.bulk 32;
		tag "$TAG_CRUCIFIX";
		hdinjectormaker.injectortype "HDCrucifier";
		hdpickup.refid "cfx";
	}
	states{
	spawn:
		CRUX A -1{
			brollsprite=true;brollcenter=true;
			roll=randompick(0,0,0,0,2,2,2,2,1,3)*90;
		}stop;
	}
}

class HDCrucifier:HDWoundFixer{
	default{
		weapon.selectionorder 1000;
		tag "$TAG_CRUCIFIX";
	}
	override string,double getpickupsprite(){return "CRUXA0",1.;}

	int draintic;

	override string gethelptext(){
		return
		"In the name of God,\n"
		"you demons shall banish\n"
		"from this realm and\n"
		"never return."
		;
	}

	action void A_Exorcise(){
	if(countinv("HealingMagic")>=3){
		if(invoker.draintic==35){
			invoker.draintic=0;
			A_TakeInventory("HealingMagic",3);
		}else{
			invoker.draintic++;
		}
		if(
			level.time>0
			&&!(level.time%25)
		){
		actor aaa;
		blockthingsiterator it=blockthingsiterator.create(self,112);
		hdmobai.frighten(self,112);
		while(it.next()){
			aaa=it.thing;
				let hdit=hdmobbase(aaa);
				let hdp=hdplayerpawn(aaa);
			if(
					aaa==self
					||HDBossBrain(aaa)
					||HDPlayerPawn(aaa)
					||!aaa.bismonster
					||aaa.health<1
					||!hdit
					||aaa.bfriendly
			)continue;

				if(
					hdit
					//&&aaa.target==self
				){
				aaa.A_ClearTarget();
				aaa.bfrightened=true;
				aaa.damagemobj(aaa,self,2,"holy",DMG_NO_ARMOR);
						}
					}
				}

//FOR THE LOVE OF GOD, I WILL SMITE YOU DEMON
//Thanks Phantombeta for this line of code
    FLineTraceData smiterange;
	if (
    LineTrace (angle, 24, pitch, offsetz: height - 18, data: smiterange) &&
    smiterange.HitType == FLineTraceData.TRACE_HitActor
    && smiterange.HitActor
    && !smiterange.HitActor.bFriendly
    && smiterange.HitActor.bismonster
) {
    smiterange.HitActor.A_ClearTarget ();
    smiterange.HitActor.bFrightened = true;
    HDF.Give (smiterange.HitActor, "Heat", 20);
			}
		}
	}

	states{
	spawn:
		TNT1 A 1;
		TNT1 A 0{
		actor a=null;
				a=spawn("HDCrucifix",invoker.pos,ALLOW_REPLACE);
			if(!a)return;
			a.angle=self.angle;a.vel=self.vel;
			a.target=self;
			a.vel=vel;
			a.A_StartSound("misc/pocket",CHAN_BODY);
		}
		stop;

	select0:
		CRFX A 0{
			A_TakeInventory("NulledWeapon");
			A_TakeInventory("HDCrucifix",1);
			invoker.buntossable=false;
			A_StartSound("misc/pocket",8,CHANF_OVERLAP);
		}
		#### A 0;
		---- A 1 A_Raise();
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		wait;

	deselect0:
		CRFX A 0{A_GiveInventory("HDCrucifix");invoker.buntossable=true;}
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;

	ready:
		CRFX A 0 A_Exorcise();
		#### A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	}
}