class HDUnmaker:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor/HDUnmaker"
		//$Title "The Unmaker"
		//$Sprite "UMKRZ0"
		inventory.icon "umkrz0";

		weapon.selectionorder 70;
		weapon.slotnumber 7;
		weapon.kickback 200;

		weapon.bobrangex 0.4;
		weapon.bobrangey 1.1;
		weapon.bobspeed 1.8;
		weapon.bobstyle "normal";
		scale 0.6;
		inventory.pickupmessage "$PICKUP_UNMAKER";
		obituary "$OB_UNMAKER";
		hdweapon.barrelsize 32,3.5,7;
		tag "$TAG_UNMAKER";
	}
	override string,double getpickupsprite(){
		return "UMKRZ0",1.;
	}

	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

	action void A_UnmakerWarp(){
		//if(random(0,3))return;
		spawn("TeleFog",pos);
		bfrightened=true;
		speed*=5;
		maxstepheight*=5;
		maxdropoffheight*=5;
		bsolid=false;
		bnogravity=true;
		bfloat=true;
		bdontinterpolate=true;

		for(int i=0;i<100;i++)A_Wander();
		

		spawn("TeleFog",pos);
		bfrightened=false;
		speed*=0.2;
		maxstepheight*=0.2;
		maxdropoffheight*=0.2;
		bsolid=true;
		bnogravity=false;
		bfloat=false;
		bdontinterpolate=false;
	}

	override double gunmass(){
		return 16;
	}
	override double weaponbulk(){
		return 256;
	}

/*

unused because this took me too much time

  override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
 if(hdw.weaponstatus[1]>0)sb.drawwepnum(hdw.weaponstatus[1],50);
  sb.drawimage("PNTAA0",(-56,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
   }
  
		sb.drawrect(-19,-11,3,1);
	}
*/

	override string gethelptext(){
		return
		"\cgFATAL ERROR\c-\n"
		"\n"
		"WEAPON ID AND\n"
		"ORIGIN NOT FOUND\n"
		"\n"
		"ERROR CODE: 0x80666AE23"
		;
	}

	override void postbeginplay(){
	super.postbeginplay();
	weaponstatus[UNMS_MAG]=0;
	}

	bool alt;
	int battery;

//y'know i did this because i wanted the zap beam to be red
	static void ThunderZap(
		actor caller,
		double zoffset=32,
		bool alt=false,
		int battery=20
	){
		//determine angle
		double shootangle=caller.angle;
		double shootpitch=caller.pitch;
		let hdp=hdplayerpawn(caller);
		if(hdp&&hdp.scopecamera){
			shootangle=hdp.scopecamera.angle;
			shootpitch=hdp.scopecamera.pitch;
		}
		if(alt){
			shootangle+=frandom(-1.2,1.2);
			shootpitch+=frandom(-1.3,1.1);
		}

		//create the line
		flinetracedata tlt;
		caller.linetrace(
			shootangle,
			8000+200*battery,
			shootpitch,
			flags:TRF_NOSKY,
			offsetz:zoffset,
			data:tlt
		);
		if(
			tlt.hittype==Trace_HitNone
			||(
				tlt.hitline&&(
					tlt.hitline.special==Line_Horizon
					||(
						tlt.linepart==2
						&&tlt.hitsector.gettexture(0)==skyflatnum
					)||(
						tlt.linepart==1
						&&tlt.hitline.sidedef[1]
						&&hdmath.oppositesector(tlt.hitline,tlt.hitsector).gettexture(0)==skyflatnum
					)
				)
			)
		)return;

		//alt does a totally different thing
		if(alt){
			if(tlt.hittype==Trace_HitNone||tlt.distance>2000)return;
			actor bbb=spawn("BeamSpotFlashRed",tlt.hitlocation-tlt.hitdir,ALLOW_REPLACE);
			if(!random(0,3))(lingeringthunderred.zap(bbb,bbb,caller,40,true));
			beamspotflash(bbb).impactdistance=tlt.distance-16*battery;
			bbb.angle=caller.angle;
			bbb.A_SprayDecal("Scorch",12);
			bbb.pitch=caller.pitch;
			bbb.target=caller;
			bbb.tracer=tlt.hitactor; //damage inflicted on the puff's end
			return;
		}

		int basedmg=int(max(0,20-tlt.distance*(1./50.)));
		int dmgflags=caller&&caller.player?DMG_PLAYERATTACK:0; //don't know why the player damagemobj doesn't work

		//wet actor
		if(tlt.hitactor){
			actor hitactor=tlt.hitactor;
			if(hitactor.bloodtype=="ShieldNotBlood"){
				hitactor.damagemobj(null,caller,random(1,(battery<<2)),"Balefire",dmgflags);
			}else if(
				hitactor.bnodamage
				||(hitactor.bnoblood&&!random(0,3))
				||hitactor.bloodtype=="NotQuiteBloodSplat"
				||hitactor.countinv("ImmunityToFire")
				||!random(0,7)
				||HDWoundFixer.CheckCovered(hitactor,true)
			){
				//dry actor - ping damage and continue
				if(!random(0,5))(lingeringthunderred.zap(hitactor,hitactor,caller,40,true));
				hdf.give(hitactor,"Heat",(basedmg>>1));
				hitactor.damagemobj(null,caller,1,"unmaker",dmgflags);
			}else{
				//wet actor
				if(!random(0,7))(lingeringthunderred.zap(hitactor,hitactor,caller,(basedmg<<1),true));
				hdf.give(hitactor,"Heat",(basedmg<<1));
				hitactor.damagemobj(null,caller,basedmg,"unmaker",dmgflags);
				actor sss=spawn("HDGunsmoke",tlt.hitlocation,ALLOW_REPLACE);
				sss.vel=(0,0,1)-tlt.hitdir;
				return;
			}
		}
		//where where the magic happens happens
		actor bbb=spawn("BeamSpotRed",tlt.hitlocation-tlt.hitdir,ALLOW_REPLACE);
		bbb.target=caller;
		bbb.stamina=basedmg;
		bbb.angle=caller.angle;
		bbb.pitch=caller.pitch;
	}

//kaboom
	action void A_ThunderZap(){
		hdunmaker.thunderzap(self,32,0,50);
	}

	Bool Laser;
	Actor Rocket;
	Action Void A_UnmakerGuide()
	{
		If(Health<1 || !Invoker.Laser)
		Return;
		Double Range=0x7fffffff;
		FTranslatedLineTarget t;
		double slope = AimLineAttack (angle, range, t);
	double shootangle=self.angle;
		double shootpitch=self.pitch;
		let hdp=hdplayerpawn(self);
		if(hdp&&hdp.scopecamera){
			shootangle=hdp.scopecamera.angle;
			shootpitch=hdp.scopecamera.pitch;
		}
		Actor puff = LineAttack (shootangle, range, shootpitch, 0, 'Normal', "UnmakerGuide", LAF_NORANDOMPUFFZ, t);
		if(puff)
		{
			Invoker.Tracer=Puff;
			Puff.bNoTimeFreeze=True;
			//Puff.Tics=1;
		}
	}

	Action Void A_FireGuidedUnmakerBall()
	{
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBallGuided").height));
		let hdp=hdplayerpawn(self);
		Actor Rock=UnmakerBallGuided(spawn("UnmakerBallGuided",gpos,ALLOW_REPLACE));
		If(Rock)
		{
			Double Range=0x7fffffff;
			FTranslatedLineTarget t;
			double slope = AimLineAttack (angle, range, t);

		if(hdp){
			rock.angle=hdp.gunangle;
			rock.pitch=hdp.gunpitch;
		}else{
			rock.angle=angle;
			rock.pitch=pitch;
		}

		rock.target=self;rock.master=self;rock.A_ChangeVelocity(speed*cos(pitch),0,speed*sin(-pitch),CVF_RELATIVE);
			Actor puff = LineAttack (angle, range, slope, 0, 'Normal', "BlankPuffUnmaker", LAF_NORANDOMPUFFZ, t);
			if (puff)
			{
				Puff.bNoTimeFreeze=False;
				Puff.Tics=35;
				Puff.bNoInterAction=True;
				Rock.Tracer=Puff;
				If(Invoker.Laser)
				{
					Rock.Master=Player.ReadyWeapon;
					Invoker.Rocket=Rock;
				}
			}
		}
	}

	//preserved just in case matt decided to nuke A_UnmakeLevel.
	//nothing to see here, go away
	action void A_UnmakeLevelUnmaker(int unmintensity=1){HDUnmaker.UnmakeLevelUnmaker(unmintensity);}
	static void UnmakeLevelUnmaker(int unmintensity=1){
		for(int k=0;k<unmintensity;k++){
			sector thissector=level.sectors[random(0,level.sectors.size()-1)];
			int dir=random(-3,3);
			double zatpoint=thissector.floorplane.ZAtPoint(thissector.centerspot);
			thissector.MoveFloor(dir,zatpoint,0,zatpoint>0?-1:1,false);
			dir=random(-3,3);
			zatpoint=thissector.ceilingplane.ZAtPoint(thissector.centerspot);
			thissector.MoveCeiling(dir,zatpoint,0,zatpoint>0?-1:1,false);
			thissector.changelightlevel(random(-random(3,4),3));
			//then maybe add some textures
			textureid shwal;
			switch(random(0,4)){
			case 1:
				shwal=texman.checkfortexture("WALL63_2",texman.type_any);break;
			case 2:
				shwal=texman.checkfortexture("W94_1",texman.type_any);break;
			case 3:
				shwal=texman.checkfortexture("FIREBLU1",texman.type_any);break;
			case 4:
				shwal=texman.checkfortexture("SNAK"..random(7,8).."_1",texman.type_any);break;
			default:
				shwal=texman.checkfortexture("ASHWALL2",texman.type_any);break;
			}
			for(int i=0;i<thissector.lines.size();i++){
				line lnn=thissector.lines[i];
				for(int j=0;j<2;j++){
					if(!lnn.sidedef[j])continue;
					if(!lnn.sidedef[j].GetTexture(side.top))lnn.sidedef[j].SetTexture(side.top,shwal);
					if(!lnn.sidedef[j].GetTexture(side.bottom))lnn.sidedef[j].SetTexture(side.bottom,shwal);
				}
			}
		}
	}

	action void A_DisplayThreatMessage()
	{
		if(random(0,countinv("UnmakerShotsFired"))>=500){
		let hdp=HDPlayerPawn(self);
		if(hdp)
			hdp.usegametip("\cx"..HDDemonKeyBase.threat());
		}
	}

	states{
	CrosshairStuff:
		TNT1 A 1 A_UnmakerGuide();
		loop;

	ThreatCheck:
		TNT1 A 10 A_DisplayThreatMessage();
		loop;

	select0:
		UMKR A 0{
				A_Overlay(16,"ThreatCheck");
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_Overlay(15,"CrosshairStuff");
				Invoker.Laser=true;
				}
			}
		goto select0bfg;
	deselect0:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				Invoker.Laser=false;
				}
				if(invoker.weaponstatus[UNMS_PISSING]==1){
				A_StartSound("weapons/unmakerbeamend",CHAN_WEAPON);
				invoker.weaponstatus[UNMS_PISSING]=0;
				Invoker.bundroppable=false;
				}
			}
		goto deselect0big;

	select1:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_Overlay(15,"CrosshairStuff");
				}
			}
		goto select1bfg;
	deselect1:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				}
			}
		goto deselect1big;

	ready:

		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");

		UMKR A 1{
			A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
			A_WeaponReady(WRF_ALL);
}
		goto readyend;

	CheckCall:
		UMKR A 0 A_Jump(96,"NotThisTime");
		goto continueinevitable;

//Armageddon happens here. Spawns a boss enemy.
	CommitDie:
		UMKR A 0 A_ClearRefire(); //mugshot.
		UMKR A 1 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"CheckCall");
	continueinevitable:
 //Unless if you have ~~Spiritual Armor~~ religious items.
		UMKR A 0 A_JumpIfInventory("HDBible",1,"NotThisTimeBible");
		//UMKR A 0 A_JumpIfInventory("HDHolyWater",1,"NotThisTimeHolyWater");
		UMKR A 0 A_JumpIfInventory("HDCrucifix",1,"NotThisTimeCrucifix");
		UMKR A 0 A_JumpIfInventory("HDChalice",1,"NotThisTimeChalice");
		//UMKR A 0 A_JumpIfInventory("HDRosary",1,"NotThisTimeRosary");

		UMKR A 0{
		    A_Quake(5,40,0,512,"brain/cube");
		    invoker.buntossable=true;
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				Invoker.Laser=false;
				invoker.weaponstatus[UNMS_GUIDED]=0;
				}
		}
		UMKR AAAAABBBBAAAAABBBBAAAAABBBBAAAABBAABBAABB 1 A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
	goto confiscate;
	kill:
		UMKR A 1{
			A_TakeInventory("UnmakerShotsFired",666);
			damagemobj(invoker,self,10000,"suicide");
			A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
			invoker.buntossable=false;
			for(int i=45;i<360;i+=90){
				A_SpawnItemEx("HDExplosion",
					4,-4,20,vel.x,vel.y,vel.z+1,i,
					SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_ABSOLUTEMOMENTUM
				);
				A_SpawnItemEx("HDSmokeChunk",0,0,0,
					vel.x+frandom(-12,12),
					vel.y+random(-12,12),
					vel.z+frandom(4,16),
					0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
				);
		}
			A_Quake(3,26,0,220,"none");
	    invoker.destroy();
		}
		goto ready;
	
	//confiscate the keys and/or the weapon itself
	confiscate:
		UMKR A 1{
				let archon = spawn("BaronUnmaker",pos,
				ALLOW_REPLACE);
				if(archon){
				archon.translation=translation;
				archon.angle=angle;
				archon.pitch=pitch;
				if(countinv("UnmakerUpgrade1Icon")){
			archon.A_GiveInventory("UnmakerUpgrade1Icon");
			A_TakeInventory("UnmakerUpgrade1Icon",1);
		}	
				if(countinv("UnmakerUpgrade2Icon")){
			archon.A_GiveInventory("UnmakerUpgrade2Icon");
			A_TakeInventory("UnmakerUpgrade2Icon",1);
		}	
				if(countinv("UnmakerUpgrade3Icon")){
			archon.A_GiveInventory("UnmakerUpgrade3Icon");
			A_TakeInventory("UnmakerUpgrade3Icon",1);
			}	
		}	
	}
	goto kill;

//Save the player from the Inevitable in exchange for a religious artifact.
	NotThisTimeBible:
		UMKR A 0 A_TakeInventory("HDBible",1);
		goto NotThisTime;

	NotThisTimeChalice:
		UMKR A 0 A_TakeInventory("HDChalice",1);
		goto NotThisTime;

	NotThisTimeCrucifix:
		UMKR A 0 A_TakeInventory("HDCrucifix",1);
		goto NotThisTime;

	NotThisTime:
		UMKR A 0{
			A_Quake(1,40,0,512,"brain/cube");
		    invoker.buntossable=true;
		}
		UMKR AAAAABBBBAAAAABBBBAAAAABB 1 A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		UMKR BBAAAABBAABBAABB 1 A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		UMKR A 0{
		    invoker.buntossable=false;
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER1);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER2);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER3);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER4);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER5);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER6);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER7);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER8);
			A_TakeInventory("UnmakerShotsFired",666);
						}
		UMKR AAAAAAAAAA 0{
						if (hdunm_unmake)
						{
							A_UnmakeLevelUnmaker(100);
						}
					}
		goto ready;

/*
Here if you really insist:

Fire - Laser Projectile (akin to original doom 64's)
Alt-Fire - Lightning Arc Attack (like the thunder buster's but instant)
Firemode - BFG-Like Projectile (requires the Orange Demon Key)
Zoom + Altfire - Egon Attack (requires the Cyan Demon Key)
Zoom + Fire - Flamer Attack (requires the Purple Demon Key)
Reload - Soul Leech (use blues first. otherwise, get aggrevated damage)
Zoom + Reload - Toggle Guidance System (Requires the Purple Demon Key)
Unload - Remove a Demon Key

50/200 blues or 50/25 aggro

Cyan Demon Key - Reduces the amount of aggro taken by 50% on every reload
Orange Demon Key - Expands the capacity to 200 (see reload requirement above)
Purple Demon Key - Has a chance to save you from the inevitable with or without having religious items (if you have one, it'll be overridden, saving them).

Downsides:

Arbitrarily, by having a demon key, there'll be a chance for you to suffer the following after firing the weapon:
Orange Demon Key - You will feel tired and fatigued.
Purple Demon Key - You will get teleported to random around you.
Cyan Demon Key - Directly damages you.
*/

	altfire:
		UMKR A 0 A_JumpIf(pressingzoom(),"beam");
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>=5)
			setweaponstate("zap");
			}
		goto nope;
	althold:
		goto nope;

	fire:
		UMKR A 0 A_JumpIf(pressingfiremode(),"CyberProjectile"); //BROKEN
		UMKR A 0 A_JumpIf(pressingzoom(),"Flamer");
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0)
			setweaponstate("semiautobeam");
			}
		goto nope;

	hold:
		UMKR A 1{
			if(invoker.weaponstatus[UNMN_SEMIONLY]==1)
			setweaponstate("nope");
		}goto semiautobeam;

	semiautobeam:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"FullAutoBeamA");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"FullAutoBeamB");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"FullAutoBeamC");
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash();
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBeam").height));
		let ggg=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		if(hdp){
			ggg.angle=hdp.gunangle;
			ggg.pitch=hdp.gunpitch;
		}else{
			ggg.angle=angle;
			ggg.pitch=pitch;
		}

		ggg.target=self;ggg.master=self;
			A_GiveInventory("UnmakerShotsFired",1);
			}else setweaponstate("nope");
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]--;
			}

				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
		goto picknegativeeffects;

	FullAutoBeamA:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"TwoBeamsC");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"TwoBeamsB");
		goto FullAutoBeamActual;

	FullAutoBeamB:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"TwoBeamsC");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"TwoBeamsA");
		goto FullAutoBeamActual;

	FullAutoBeamC:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"TwoBeamsB");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"TwoBeamsA");
	FullAutoBeamActual:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash();
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBeam").height));
		let ggg=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		if(hdp){
			ggg.angle=hdp.gunangle;
			ggg.pitch=hdp.gunpitch;
		}else{
			ggg.angle=angle;
			ggg.pitch=pitch;
		}

		ggg.target=self;ggg.master=self;
			A_GiveInventory("UnmakerShotsFired",1);
			}else setweaponstate("nope");
			}
		UMKR AAAAA 1 A_WeaponReady(WRF_NONE);
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]--;
			}

				A_WeaponReady(WRF_NONE);
				
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
		UMKR A 0 A_Refire("FullAutoBeamActual");
		goto picknegativeeffects;

	TwoBeamsA:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"ThreeBeams");
		goto TwoBeamsActual;

	TwoBeamsB:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"ThreeBeams");
		goto TwoBeamsActual;

	TwoBeamsC:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"ThreeBeams");
	TwoBeamsActual:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>1){
				A_GunFlash();
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBeam").height));
		let ggg=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));
		let ggg2=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		if(hdp){
			ggg.angle=hdp.gunangle+2;
			ggg.pitch=hdp.gunpitch;
			ggg2.angle=hdp.gunangle-2;
			ggg2.pitch=hdp.gunpitch;
		}else{
			ggg.angle=angle+2;
			ggg.pitch=pitch;
			ggg2.angle=angle-2;
			ggg2.pitch=pitch;
		}

		ggg.target=self;ggg.master=self;ggg2.target=self;ggg2.master=self;
			A_GiveInventory("UnmakerShotsFired",2);
			}else setweaponstate("nope");
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=2;
			}

				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
		goto picknegativeeffects;


	ThreeBeams:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>2){
				A_GunFlash();
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBeam").height));
		let ggg=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));
		let ggg2=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));
		let ggg3=UnmakerBeam(spawn("UnmakerBeam",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		if(hdp){
			ggg.angle=hdp.gunangle+3;
			ggg.pitch=hdp.gunpitch;
			ggg2.angle=hdp.gunangle-3;
			ggg2.pitch=hdp.gunpitch;
			ggg3.angle=hdp.gunangle;
			ggg3.pitch=hdp.gunpitch;
		}else{
			ggg.angle=angle+3;
			ggg.pitch=pitch;
			ggg2.angle=angle-3;
			ggg2.pitch=pitch;
			ggg3.angle=angle;
			ggg3.pitch=pitch;
		}

		ggg.target=self;ggg.master=self;
		ggg2.target=self;ggg2.master=self;
		ggg3.target=self;ggg3.master=self;
			A_GiveInventory("UnmakerShotsFired",3);
			}else setweaponstate("nope");
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=3;
			}

				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
		goto picknegativeeffects;

	Beam:
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]<1)
			setweaponstate("nope");
		}
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"Beam2");
		goto nope;

	Beam2:
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]<1)
			setweaponstate("nope");
		    A_GiveInventory("UnmakerShotsFired",10);
		    invoker.buntossable=true;
			invoker.weaponstatus[UNMS_TICS]=0;
			invoker.weaponstatus[UNMS_PISSING]=1;
			A_StartSound("weapons/unmakerbeamstart",CHAN_WEAPON);
		}
	Beam2Loop:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash("flashsilent");
			A_ZoomRecoil(1.2);
A_MuzzleClimb(-frandom(0.34,0.4),-frandom(0.5,0.6),-frandom(0.34,0.4),-frandom(0.5,0.6));
			A_RailAttack(10,0,false,"","ff 55 88",
			RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT|RGF_CENTERZ, 
			50.0,"EgonUnmaker",0,0,0,1,0.2);
						if (hdunm_unmake)
						{
							A_UnmakeLevelUnmaker(10);
						}
			invoker.weaponstatus[UNMS_TICS]++;
			}else setweaponstate("BeamEnd");
			}
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_SUBMAG]<1){
				invoker.weaponstatus[UNMS_MAG]--;
				invoker.weaponstatus[UNMS_SUBMAG]+=10;
			}else
			invoker.weaponstatus[UNMS_SUBMAG]--;
		}

		UMKR A 0{
if(invoker.weaponstatus[UNMS_TICS]>105)A_Refire("Beam3");
		}
		UMKR A 0 A_Refire("Beam2Loop");
		goto BeamEnd;

	Beam3:
		UMKR A 0{
			invoker.buntossable=true;
			A_StartSound("weapons/unmakerbeamloop",CHAN_WEAPON,CHANF_LOOPING);
		}
	Beam3Loop:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash("flashsilent");
			A_ZoomRecoil(1.2);
A_MuzzleClimb(-frandom(0.34,0.4),-frandom(0.5,0.6),-frandom(0.34,0.4),-frandom(0.5,0.6));
			A_RailAttack(10,0,false,"","ff 55 88",
			RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT|RGF_CENTERZ, 
			50.0,"EgonUnmaker",0,0,0,1,0.2);
						if (hdunm_unmake)
						{
							A_UnmakeLevelUnmaker(10);
						}
			}else setweaponstate("BeamEnd");
			}
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_SUBMAG]<1){
				invoker.weaponstatus[UNMS_MAG]--;
				invoker.weaponstatus[UNMS_SUBMAG]+=10;
			}else{
			invoker.weaponstatus[UNMS_SUBMAG]--;
		}
				A_WeaponReady();
		}
		UMKR A 0 A_Refire("Beam3Loop");
		goto BeamEnd;

	BeamEnd:
		UMKR B 1{
			invoker.buntossable=false;
			invoker.weaponstatus[UNMS_PISSING]=0;
			A_StartSound("weapons/unmakerbeamend",CHAN_WEAPON);
/*
				A_CustomRailgun((5),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"EgonUnmaker",0,0,2048,18,0.2,1.0);
*/
A_RailAttack((5),0,false,"","ff 55 88",RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT|RGF_CENTERZ,50.0,"EgonUnmaker",0,0,0,18,0.2,1.0);
						if (hdunm_unmake)
						{
							A_UnmakeLevelUnmaker(1);
						}
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
			if(invoker.weaponstatus[UNMS_SUBMAG]<1){
				invoker.weaponstatus[UNMS_MAG]--;
				invoker.weaponstatus[UNMS_SUBMAG]+=10;
			}else{
			invoker.weaponstatus[UNMS_SUBMAG]--;
		}
			}
				
		}
		UMKR A 1 A_WeaponReady(WRF_NOFIRE);
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
		goto picknegativeeffects;

	user2:
	CyberProjectile:
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>4&&
			countinv("UnmakerUpgrade1Icon"))
			setweaponstate("CyberProjectile2");
			}
		goto nope;

	CyberProjectile2:
		UMKR B 1{
				A_GunFlash();
			if(invoker.weaponstatus[UNMS_GUIDED]==1)
				A_FireGuidedUnmakerBall();
				else{
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("UnmakerBall").height));
		let ggg=UnmakerBall(spawn("UnmakerBall",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		if(hdp){
			ggg.angle=hdp.gunangle;
			ggg.pitch=hdp.gunpitch;
		}else{
			ggg.angle=angle;
			ggg.pitch=pitch;
		}

		ggg.target=self;ggg.master=self;ggg.A_ChangeVelocity(speed*cos(pitch),0,speed*sin(-pitch),CVF_RELATIVE);
			}

			A_GiveInventory("UnmakerShotsFired",1);
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=5;
			}
				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
		goto picknegativeeffects;

	Flamer:
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>4&&
			countinv("UnmakerUpgrade2Icon"))
			setweaponstate("Warm");
			}
		goto nope;

	Warm:
		UMKR BBBBB 2{
			if(invoker.weaponstatus[UNMS_MAG]>=1){
				A_GunFlash();
				invoker.weaponstatus[UNMS_MAG]--;
			A_ZoomRecoil(0.5);
				A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
		A_MuzzleClimb(-frandom(0.34,0.4),
		-frandom(0.5,0.6),-frandom(0.34,0.4),
		-frandom(0.5,0.6));
				A_WeaponReady(WRF_NOFIRE);
			A_StartSound("fatso/attack",CHAN_WEAPON,CHANF_OVERLAP);
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("HDUnmakerFlame").height));
		let ggg=HDUnmakerFlame(spawn("HDUnmakerFlame",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		if(hdp){
			ggg.angle=hdp.gunangle;
			ggg.pitch=hdp.gunpitch;
		}else{
			ggg.angle=angle;
			ggg.pitch=pitch;
		}

		ggg.target=self;ggg.master=self;
			A_GiveInventory("UnmakerShotsFired",1);
			}
			}
		UMKR A 1 A_WeaponReady(WRF_NOFIRE);
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",666,"CommitDie");
		goto picknegativeeffects;

	zap:
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]<5)
				setweaponstate("nope");
			}
		UMKR BBBBBBBBBBBBBBBBBB 0 bright light("FIRE")A_ThunderZap(); //doubled it. take it or leave it.
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash();
			A_GiveInventory("UnmakerShotsFired",1);
			}else setweaponstate("nope");

			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=5;
			}
				
		}
		UMKR A 1 A_WeaponReady(WRF_NOFIRE);
		goto picknegativeeffects;
	flash:
		UMKR B 0{
			A_AlertMonsters();

			A_ZoomRecoil(0.95);
		}
		UMKR F 1 bright{
			HDFlashAlpha(32);
			A_Light1();
		}
		TNT1 A 0 A_MuzzleClimb(-frandom(0.34,0.4),-frandom(0.5,0.6),-frandom(0.34,0.4),-frandom(0.5,0.6));
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"ConfirmationA");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"ConfirmationB");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"ConfirmationC");
		goto soundvanilla;
	soundvanilla:
		UMKR B 0 A_StartSound("weapons/unmaker",CHAN_WEAPON,volume:1);
		goto lightdone;

	soundfuckedup1:
		UMKR B 0 A_StartSound("weapons/unmaker2",CHAN_WEAPON,volume:2.5);
		goto lightdone;

	soundfuckedup2:
		UMKR B 0 A_StartSound("weapons/unmaker3",CHAN_WEAPON,volume:2.5);
		goto lightdone;

//oh my fucking god
	ConfirmationA:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"Confirmation2C");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"Confirmation2B");
		goto SoundVanilla;

	ConfirmationB:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"Confirmation2C");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"Confirmation2A");
		goto SoundVanilla;

	ConfirmationC:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"Confirmation2B");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"Confirmation2A");
		goto SoundVanilla;

	Confirmation2A:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"SoundFuckedUp2");
		goto SoundFuckedUp1;

	Confirmation2B:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"SoundFuckedUp2");
		goto SoundFuckedUp1;

	Confirmation2C:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"SoundFuckedUp2");
		goto SoundFuckedUp1;

	flashsilent:
		UMKR B 0{
			A_AlertMonsters();

			A_ZoomRecoil(0.95);
		}
		UMKR F 1 bright{
			HDFlashAlpha(32);
			A_Light1();
		}
		TNT1 A 0 A_MuzzleClimb(-frandom(0.34,0.4),-frandom(0.5,0.6),-frandom(0.34,0.4),-frandom(0.5,0.6));
		goto lightdone;

	reload:
		UMKR A 0 A_JumpIf(pressingzoom(),"GuidedMode");
		UMKR A 0{
	if(!countinv("UnmakerUpgrade1Icon") &&
		invoker.weaponstatus[UNMS_MAG]==50)
		setweaponstate("nope");
		else if(invoker.weaponstatus[UNMS_MAG]==200)
		setweaponstate("nope");
		}goto unmag;
	unmag:
		UMKR A 1 offset(0,34) A_SetCrosshair(21);
		UMKR A 1 offset(5,38);

		UMKR A 1 offset(10,42);
		UMKR B 2 offset(20,46) A_StartSound("misc/bulletflesh",CHAN_WEAPON);
		UMKR B 4 offset(30,52){
			A_MuzzleClimb(0.3,0.4);
			A_StartSound("misc/smallslop",CHAN_WEAPON);
		}
	pocketmag:
		UMKR BB 7 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
	loadmag:
		UMKR B 0 A_StartSound("misc/smallslop",CHAN_WEAPON);
		UMKR B 6 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		UMKR B 7 offset(34,52) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		UMKR B 10 offset(32,50);
		UMKR B 2 offset(32,49){
			/*if(owner.regenblues>49)invoker.regenblues-=50;
			else owner.aggrevateddamage+=50;*/
							givebody(max(0,11-health));
				damagemobj(invoker,self,10,"balefire",DMG_FORCED);
				A_GiveInventory("IsMoving",5);
				A_StartSound("misc/gibbed",CHAN_BODY);
			setweaponstate("demonkeycheck");
		}

	loadmag2:
		UMKR B 2 offset(32,49){
			/*if(owner.regenblues>49)invoker.regenblues-=50;
			else owner.aggrevateddamage+=25;*/
							givebody(max(0,11-health));
				/*damagemobj(invoker,self,10,"bashing");*/
				A_GiveInventory("IsMoving",5);
				A_StartSound("misc/gibbed",CHAN_BODY);
			setweaponstate("demonkeycheck");
		}

	demonkeycheck:
		UMKR B 1 offset(32,49){	if(!countinv("UnmakerUpgrade1Icon"))invoker.weaponstatus[UNMS_MAG]=50;
	else invoker.weaponstatus[UNMS_MAG]=200;
			setweaponstate("applycostaggro");
		}

//:GIMMEABREAK:
	applycostaggro:
		UMKR B 0 A_JumpIfInventory("UnmakerUpgrade1Icon",
		1,"applycostaggro2");
		UMKR B 0 A_JumpIfInventory("HealingMagic",
		50,"applycostblues");
	applycostaggrocont:
		UMKR B 1 offset(32,49){
		let hdp=hdplayerpawn(self);
	if(!countinv("UnmakerUpgrade3Icon")){
			hdp.aggravateddamage+=50;
	}else
			hdp.aggravateddamage+=25;
			setweaponstate("reloadend");
		}

	applycostaggro2:
		UMKR B 0 A_JumpIfInventory("HealingMagic",
		200,"applycostblues");
		goto applycostaggrocont;

	applycostblues:
		UMKR B 1 offset(32,49){
		let hdp=hdplayerpawn(self);
	if(!countinv("UnmakerUpgrade1Icon")){
			A_TakeInventory("HealingMagic",50);
	}else
			A_TakeInventory("HealingMagic",200);
			setweaponstate("reloadend");
		}
		
	unload:
	    	//abort if no keys to unload
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"lowertoopen");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"lowertoopen");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"lowertoopen");
		goto nope;

	//lower the weapon, open it, decide what to do
	lowertoopen:
		UMKR A 2 offset(0,36);
		UMKR A 2 offset(4,38){
			A_StartSound("misc/gibbed",CHAN_WEAPON);
			A_MuzzleClimb(-frandom(1.2,1.8),-frandom(1.8,2.4));
		}
		UMKR A 6 offset(9,41)A_StartSound("misc/smallslop",CHAN_AUTO);
		UMKR A 8 offset(12,43)A_StartSound("misc/bulletflesh",CHAN_WEAPON);
		UMKR A 5 offset(10,41)A_StartSound("misc/bulletflesh",CHAN_AUTO);
	slop:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"slop3");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"slop2");
		UMKR A 10 offset(11,42){
				A_SetTics(4);
				A_DropItem("HDOrangeDemonKey");
				A_TakeInventory("UnmakerUpgrade1Icon",1);
		if(invoker.weaponstatus[UNMS_MAG]>50)
		invoker.weaponstatus[UNMS_MAG]=50; //preventing exploits
		}goto unloadend;
		
	slop2:
		UMKR A 10 offset(11,42){
				A_SetTics(4);
				A_DropItem("HDPurpleDemonKey");
				A_TakeInventory("UnmakerUpgrade2Icon",1);

				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				Invoker.Laser=false;
				invoker.weaponstatus[UNMS_GUIDED]=0;
				}

		}goto unloadend;
		
	slop3:
		UMKR A 10 offset(11,42){
				A_SetTics(4);
				A_DropItem("HDCyanDemonKey");
				A_TakeInventory("UnmakerUpgrade3Icon",1);
		}goto unloadend;

	unloadend:
		UMKR A 3 offset(9,41);
		UMKR A 2 offset(6,38);
		UMKR A 3 offset(2,34);
		goto ready;

	reloadend:
		UMKR B 3 offset(30,52);
		UMKR B 2 offset(20,46);
		UMKR A 1 offset(10,42);
		UMKR A 1 offset(5,38);
		UMKR A 1 offset(0,34);
		goto nope;

//all negative effects are handled here
	picknegativeeffects:
		UMKR A 0 A_Jump(128,"Effect1","Effect2","Effect3");
		goto nope;

	Effect1:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"DoEffect1");
		goto nope;

	DoEffect1:
		UMKR A 0{
		let hdp=hdplayerpawn(self);
		hdp.fatigue+=15;
		hdp.stunned+=30;
		}
		goto nope;

	Effect2:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"DoEffect2");
		goto nope;

	DoEffect2:
		UMKR A 0 A_UnmakerWarp();
		goto nope;

	Effect3:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"DoEffect3");
		goto nope;


	GuidedMode:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"ToggleGuide");
		goto nope;
	ToggleGuide:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				invoker.weaponstatus[UNMS_GUIDED]=0;
				Invoker.Laser=false;
				}else{
				A_Overlay(15,"CrosshairStuff");
				invoker.weaponstatus[UNMS_GUIDED]=1;
				Invoker.Laser=true;
				}
				A_StartSound("misc/smallslop",CHAN_AUTO);
			}
		goto nope;

	DoEffect3:
		UMKR A 0{
		damagemobj(invoker,self,random(1,15),"balefire",DMG_FORCED);
		}
		goto nope;

	spawn:
		UMKR Z -1;
			stop;
		}
	override void initializewepstats(bool idfa){
		weaponstatus[0]=0;
	if(!countinv("UnmakerUpgrade1Icon"))
			weaponstatus[UNMS_MAG]=50;
			else weaponstatus[UNMS_MAG]=200;
		weaponstatus[UNMS_CHAMBER]=2;
		weaponstatus[UNMS_SUBMAG]=10;
	}
}
enum unmakerstatus{
	UNMF_JUSTUNLOAD=1,

	UNMN_SEMIONLY=1,
	UNMN_BURSTONLY=2,
	UNMN_FULLONLY=3,

	UNMS_FLAGS=0,
	UNMS_MAG=1,
	UNMS_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	UNMS_TICS=3,
	UNMS_PISSING=4,
	UNMS_GUIDED=5,
	UNMS_SUBMAG=6,
};

/*
THE UNMAKER

The Weapon of Hell itself. The curse of human and demonkind alike.
The Bane of The Tyrant's Existence. It is sewn from the Superdemons who
posed an extreme threat from even their own demonkind.
Scriptures from where
it was extracted from says that it's capable of destroying whatever it is
in its way, hence its name. However, it isn't an excuse to be too cocky from
the weapon becayse according to a grim note, whoever overuses the "thing" will suffer the
Wrath of The Unmaker, which turn any soul, regardless of species into
the Archon of Hell,
a semi-synthetic demon transmuted with the artifact, indicating that the unholy revelation's
manifestation is complete.
*/